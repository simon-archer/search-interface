'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var floatingUi_react = require('../../node_modules/@floating-ui/react/dist/floating-ui.react.js');
var lite = require('../../node_modules/clsx/dist/lite.js');
var DropdownMenu = require('./DropdownMenu.js');
var floatingUi_dom = require('../../node_modules/@floating-ui/dom/dist/floating-ui.dom.js');
var floatingUi_core = require('../../node_modules/@floating-ui/core/dist/floating-ui.core.js');
var useIsomorphicLayoutEffect = require('../../hooks/useIsomorphicLayoutEffect.js');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

const GAP = 4;
const DropdownMenuContent = React.forwardRef(({ className, children, ...rest }, ref) => {
    const { size, placement, portal, anchorEl, isControlled, internalOpen, setInternalOpen, onClose, } = React.useContext(DropdownMenu.DropdownMenuContext);
    const Container = portal ? floatingUi_react.FloatingPortal : React__namespace.Fragment;
    const floatingEl = React.useRef(null);
    const { context, update, refs, placement: flPlacement, floatingStyles, } = floatingUi_react.useFloating({
        placement,
        open: internalOpen,
        onOpenChange: (localOpen) => {
            if (!localOpen)
                onClose && onClose();
            if (!isControlled)
                setInternalOpen(localOpen);
        },
        elements: {
            reference: anchorEl,
            floating: floatingEl.current,
        },
        whileElementsMounted: floatingUi_dom.autoUpdate,
        middleware: [floatingUi_core.offset(GAP), floatingUi_dom.shift()],
    });
    const { getFloatingProps } = floatingUi_react.useInteractions([
        floatingUi_react.useFocus(context),
        floatingUi_react.useClick(context),
        floatingUi_react.useDismiss(context),
        floatingUi_react.useRole(context),
    ]);
    useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        refs.setReference(anchorEl);
        if (!refs.reference.current || !refs.floating.current || !internalOpen)
            return;
        const cleanup = floatingUi_dom.autoUpdate(refs.reference.current, refs.floating.current, update);
        return () => cleanup();
    }, [refs.floating, refs.reference, update, anchorEl, refs, internalOpen]);
    const floatingRef = floatingUi_react.useMergeRefs([refs.setFloating, ref]);
    return (jsxRuntime.jsx(jsxRuntime.Fragment, { children: internalOpen && (jsxRuntime.jsx(floatingUi_react.FloatingFocusManager, { context: context, guards: false, modal: false, children: jsxRuntime.jsx(Container, { children: jsxRuntime.jsx("ul", { role: 'menu', "aria-hidden": !internalOpen, "data-placement": flPlacement, ref: floatingRef, style: floatingStyles, ...getFloatingProps({
                        ref: floatingRef,
                        tabIndex: undefined,
                    }), className: lite.clsx('fds-dropdownmenu', `fds-dropdownmenu--${size}`, className), ...rest, children: children }) }) })) }));
});
DropdownMenuContent.displayName = 'DropdownMenuContent';

exports.DropdownMenuContent = DropdownMenuContent;
