'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var floatingUi_react = require('../../node_modules/@floating-ui/react/dist/floating-ui.react.js');
var index = require('../../node_modules/@radix-ui/react-slot/dist/index.js');
var DropdownMenu = require('./DropdownMenu.js');
var Button = require('../Button/Button.js');

const DropdownMenuTrigger = React.forwardRef(({ asChild, ...rest }, ref) => {
    const { triggerRef, internalOpen, setInternalOpen, isControlled } = React.useContext(DropdownMenu.DropdownMenuContext);
    const mergedRefs = floatingUi_react.useMergeRefs([ref, triggerRef]);
    const Component = asChild ? index.Slot : Button.Button;
    return (jsxRuntime.jsx(Component, { ref: mergedRefs, onClick: () => {
            if (!isControlled)
                setInternalOpen(!internalOpen);
        }, "aria-haspopup": 'menu', "aria-expanded": internalOpen, ...rest }));
});
DropdownMenuTrigger.displayName = 'DropdownMenuTrigger';

exports.DropdownMenuTrigger = DropdownMenuTrigger;
