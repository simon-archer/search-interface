'use client';
import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { forwardRef } from 'react';
import { clsx } from '../../../node_modules/clsx/dist/lite.js';
import { useMergeRefs } from '../../../node_modules/@floating-ui/react/dist/floating-ui.react.js';
import { useCheckbox } from './useCheckbox.js';
import { Paragraph } from '../../Typography/Paragraph/Paragraph.js';
import { omit } from '../../../utilities/objectUtils.js';
import { Label } from '../../Typography/Label/Label.js';

const Checkbox = forwardRef((props, ref) => {
    const { children, description, className, style, ...rest } = props;
    const { inputProps, descriptionId, hasError, size = 'md', readOnly, } = useCheckbox(props);
    const inputRef = useMergeRefs([
        ref,
        (el) => {
            if (el) {
                el.indeterminate = rest.indeterminate ?? false;
            }
        },
    ]);
    return (jsx(Paragraph, { asChild: true, size: size, children: jsxs("div", { className: clsx('fds-checkbox', `fds-checkbox--${size}`, hasError && `fds-checkbox--error`, readOnly && `fds-checkbox--readonly`, className), style: style, children: [jsx("input", { className: `fds-checkbox__input`, ref: inputRef, ...omit(['size', 'error', 'indeterminate'], rest), ...inputProps, type: 'checkbox', disabled: inputProps.disabled, "aria-checked": rest.indeterminate ? 'mixed' : inputProps.checked }), children && (jsxs(Fragment, { children: [jsx(Label, { className: `fds-checkbox__label`, htmlFor: inputProps.id, size: size, weight: 'regular', children: jsx("span", { children: children }) }), description && (jsx(Paragraph, { asChild: true, size: size, children: jsx("div", { id: descriptionId, className: `fds-checkbox__description`, children: description }) }))] }))] }) }));
});
Checkbox.displayName = 'Checkbox';

export { Checkbox };
