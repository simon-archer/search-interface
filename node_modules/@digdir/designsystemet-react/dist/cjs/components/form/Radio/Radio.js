'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var lite = require('../../../node_modules/clsx/dist/lite.js');
var useRadio = require('./useRadio.js');
var Paragraph = require('../../Typography/Paragraph/Paragraph.js');
var objectUtils = require('../../../utilities/objectUtils.js');
var Label = require('../../Typography/Label/Label.js');

const Radio = React.forwardRef((props, ref) => {
    const { children, description, className, style, ...rest } = props;
    const { inputProps, descriptionId, hasError, size = 'md', readOnly, } = useRadio.useRadio(props);
    return (jsxRuntime.jsx(Paragraph.Paragraph, { asChild: true, size: size, children: jsxRuntime.jsxs("div", { className: lite.clsx('fds-radio', `fds-radio--${size}`, hasError && `fds-radio--error`, readOnly && `fds-radio--readonly`, className), style: style, children: [jsxRuntime.jsx("input", { className: 'fds-radio__input', disabled: inputProps.disabled, ref: ref, ...objectUtils.omit(['size', 'error'], rest), ...inputProps }), children && (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(Label.Label, { className: 'fds-radio__label', htmlFor: inputProps.id, size: size, weight: 'regular', children: jsxRuntime.jsx("span", { children: children }) }), description && (jsxRuntime.jsx(Paragraph.Paragraph, { asChild: true, size: size, children: jsxRuntime.jsx("div", { id: descriptionId, className: 'fds-radio__description', children: description }) }))] }))] }) }));
});
Radio.displayName = 'Radio';

exports.Radio = Radio;
