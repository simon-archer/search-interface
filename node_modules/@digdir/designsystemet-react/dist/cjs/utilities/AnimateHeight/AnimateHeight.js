'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var lite = require('../../node_modules/clsx/dist/lite.js');
var usePrevious = require('../../hooks/usePrevious.js');
var useMediaQuery = require('../../hooks/useMediaQuery.js');

const transitionDurationInMilliseconds = 250;
/**
 * AnimateHeight is a component that animates its height when the `open` prop changes.
 */
const AnimateHeight = ({ children, className, open = false, style, ...rest }) => {
    const [height, setHeight] = React.useState(0);
    const prevOpen = usePrevious.usePrevious(open);
    const openOrClosed = open ? 'open' : 'closed';
    const [state, setState] = React.useState(openOrClosed);
    const timeoutRef = React.useRef(null);
    const shouldAnimate = !useMediaQuery.useMediaQuery('(prefers-reduced-motion)');
    const contentRef = React.useCallback((node) => {
        if (node) {
            const resizeObserver = new ResizeObserver(() => {
                setHeight(open ? node.getBoundingClientRect().height : 0);
            });
            resizeObserver.observe(node);
        }
        if (prevOpen !== undefined && prevOpen !== open) {
            // Opening or closing
            setState(shouldAnimate ? 'openingOrClosing' : openOrClosed);
            timeoutRef.current && clearTimeout(timeoutRef.current); // Reset timeout if already active (i.e. if the user closes the component before it finishes opening)
            timeoutRef.current = setTimeout(() => {
                setState(openOrClosed);
            }, transitionDurationInMilliseconds);
        }
    }, [open, openOrClosed, prevOpen, shouldAnimate]);
    const transition = state === 'openingOrClosing'
        ? `height ${transitionDurationInMilliseconds}ms ease-in-out`
        : undefined;
    return (jsxRuntime.jsx("div", { ...rest, className: lite.clsx('fds-animate-height', `fds-animate-height--${state}`, className), style: { height, transition, ...style }, children: jsxRuntime.jsx("div", { ref: contentRef, className: 'fds-animate-height__content', children: children }) }));
};

exports.AnimateHeight = AnimateHeight;
