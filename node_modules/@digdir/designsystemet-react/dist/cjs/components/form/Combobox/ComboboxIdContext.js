'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');

const ComboboxIdContext = React.createContext({
    activeIndex: 0,
});
const ComboboxIdReducer = (state, action) => {
    switch (action.type) {
        case 'SET_ACTIVE_INDEX':
            return {
                ...state,
                activeIndex: action.payload,
            };
        default:
            return state;
    }
};
const ComboboxIdDispatch = React.createContext(() => {
    throw new Error('ComboboxIdDispatch must be used within a provider');
});
const ComboboxIdProvider = ({ children, }) => {
    const [state, dispatch] = React.useReducer(ComboboxIdReducer, {
        activeIndex: 0,
    });
    return (jsxRuntime.jsx(ComboboxIdContext.Provider, { value: state, children: jsxRuntime.jsx(ComboboxIdDispatch.Provider, { value: dispatch, children: children }) }));
};
function useComboboxIdDispatch() {
    return React.useContext(ComboboxIdDispatch);
}
function useComboboxId() {
    return React.useContext(ComboboxIdContext);
}

exports.ComboboxIdContext = ComboboxIdContext;
exports.ComboboxIdDispatch = ComboboxIdDispatch;
exports.ComboboxIdProvider = ComboboxIdProvider;
exports.ComboboxIdReducer = ComboboxIdReducer;
exports.useComboboxId = useComboboxId;
exports.useComboboxIdDispatch = useComboboxIdDispatch;
