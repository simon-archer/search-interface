'use client';
import { jsx, jsxs } from 'react/jsx-runtime';
import { forwardRef, useRef, useState, useCallback } from 'react';
import { clsx } from '../../../node_modules/clsx/dist/lite.js';
import { MagnifyingGlassIcon, XMarkIcon } from '@navikt/aksel-icons';
import { useMergeRefs } from '../../../node_modules/@floating-ui/react/dist/floating-ui.react.js';
import { useSearch } from './useSearch.js';
import { Button } from '../../Button/Button.js';
import { Paragraph } from '../../Typography/Paragraph/Paragraph.js';
import { Label } from '../../Typography/Label/Label.js';
import { omit } from '../../../utilities/objectUtils.js';
import { ErrorMessage } from '../../Typography/ErrorMessage/ErrorMessage.js';

/** Search field
 *
 * @example
 * ```tsx
 * <Search label="Search" label">
 * ```
 */
const Search = forwardRef((props, ref) => {
    const { label, style, hideLabel = true, variant = 'simple', searchButtonLabel = 'Søk', clearButtonLabel = 'Tøm', defaultValue, value, onChange, onClear, disabled, onSearchClick, htmlSize = 27, className, ...rest } = props;
    const { inputProps, hasError, errorId, size = 'md' } = useSearch(props);
    const inputRef = useRef();
    const mergedRef = useMergeRefs([ref, inputRef]);
    const [internalValue, setInternalValue] = useState(defaultValue ?? '');
    const handleChange = useCallback((e) => {
        const newValue = e.target.value;
        value === undefined && setInternalValue(newValue);
        onChange?.(e);
    }, [onChange, value]);
    const handleClear = () => {
        onClear?.(internalValue);
        setInternalValue('');
        inputRef?.current && inputRef.current.focus();
    };
    const handleSearchClick = () => {
        onSearchClick?.((value ?? internalValue).toString());
    };
    const isSimple = variant === 'simple';
    const showClearButton = Boolean(value ?? internalValue) && !disabled;
    return (jsx(Paragraph, { asChild: true, size: size, children: jsxs("div", { style: style, className: clsx('fds-search', inputProps.disabled && 'fds-search--disabled', `fds-search--${size}`, className), children: [label && (jsx(Label, { size: size, weight: 'medium', htmlFor: inputProps.id, className: clsx('fds-search__label', hideLabel && 'fds-sr-only'), children: jsx("span", { children: label }) })), jsxs("div", { className: 'fds-search__field', children: [jsxs("div", { className: clsx('fds-search__field', `fds-search--${size}`), children: [isSimple && (jsx(MagnifyingGlassIcon, { className: 'fds-search__icon', "aria-hidden": true })), jsx("input", { ref: mergedRef, size: htmlSize, value: value ?? internalValue, disabled: disabled, className: clsx('fds-search__input', `fds-focus`, isSimple
                                        ? 'fds-search__input--simple'
                                        : 'fds-search__input--with-search-button'), ...omit(['size', 'error', 'errorId', 'readOnly'], rest), ...inputProps, onChange: handleChange }), showClearButton && (jsxs("button", { className: clsx('fds-search__clear-button', `fds-focus`), type: 'button', onClick: handleClear, disabled: disabled, children: [jsx("span", { className: `fds-sr-only`, children: clearButtonLabel }), jsx(XMarkIcon, { "aria-hidden": true })] }))] }), !isSimple && (jsx(Button, { className: 'fds-search__search-button', size: size, variant: variant, type: 'submit', onClick: handleSearchClick, disabled: disabled, children: searchButtonLabel }))] }), jsx("div", { className: 'fds-search__error-message', id: errorId, "aria-live": 'polite', "aria-relevant": 'additions removals', children: hasError && jsx(ErrorMessage, { size: size, children: props.error }) })] }) }));
});
Search.displayName = 'Search';

export { Search };
