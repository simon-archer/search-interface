import type { HTMLAttributes } from 'react';
import * as React from 'react';
export type TooltipProps = {
    /**
     * The element that triggers the tooltip.
     * @note Needs to be a single ReactElement and not: <React.Fragment/> | <></>
     */
    children: React.ReactElement & React.RefAttributes<HTMLElement>;
    /** Content of the tooltip */
    content: string;
    /**
     * Placement of the tooltip on the trigger.
     * @default 'top'
     */
    placement?: 'top' | 'right' | 'bottom' | 'left';
    /** Delay in milliseconds before opening.
     * @default 150
     */
    delay?: number;
    /** Whether the tooltip is open or not.
     * This overrides the internal state of the tooltip.
     */
    open?: boolean;
    /** Whether the tooltip is open by default or not. */
    defaultOpen?: boolean;
    /** Inverts the color of the tooltip. Use this on dark backgrounds. */
    inverted?: boolean;
    /**
     * Portals the floating element outside of the app root and into the body.
     * @see https://floating-ui.com/docs/floatingportal
     * @default true
     */
    portal?: boolean;
} & HTMLAttributes<HTMLDivElement>;
export declare const Tooltip: React.ForwardRefExoticComponent<{
    /**
     * The element that triggers the tooltip.
     * @note Needs to be a single ReactElement and not: <React.Fragment/> | <></>
     */
    children: React.ReactElement & React.RefAttributes<HTMLElement>;
    /** Content of the tooltip */
    content: string;
    /**
     * Placement of the tooltip on the trigger.
     * @default 'top'
     */
    placement?: "top" | "right" | "bottom" | "left" | undefined;
    /** Delay in milliseconds before opening.
     * @default 150
     */
    delay?: number | undefined;
    /** Whether the tooltip is open or not.
     * This overrides the internal state of the tooltip.
     */
    open?: boolean | undefined;
    /** Whether the tooltip is open by default or not. */
    defaultOpen?: boolean | undefined;
    /** Inverts the color of the tooltip. Use this on dark backgrounds. */
    inverted?: boolean | undefined;
    /**
     * Portals the floating element outside of the app root and into the body.
     * @see https://floating-ui.com/docs/floatingportal
     * @default true
     */
    portal?: boolean | undefined;
} & HTMLAttributes<HTMLDivElement> & React.RefAttributes<HTMLDivElement>>;
//# sourceMappingURL=Tooltip.d.ts.map