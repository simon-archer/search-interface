'use client';
import { useFloating, useRole, useDismiss, useListNavigation, useInteractions } from '../../../node_modules/@floating-ui/react/dist/floating-ui.react.js';
import { useState } from 'react';
import { flushSync } from 'react-dom';
import { useComboboxId, useComboboxIdDispatch } from './ComboboxIdContext.js';
import { autoUpdate, flip, size } from '../../../node_modules/@floating-ui/dom/dist/floating-ui.dom.js';
import { offset } from '../../../node_modules/@floating-ui/core/dist/floating-ui.core.js';

const useFloatingCombobox = ({ listRef }) => {
    const [open, setOpen] = useState(false);
    const { activeIndex } = useComboboxId();
    const dispatch = useComboboxIdDispatch();
    // floating UI
    const { refs, floatingStyles, context } = useFloating({
        open,
        onOpenChange: (newOpen) => {
            if (!newOpen)
                dispatch?.({ type: 'SET_ACTIVE_INDEX', payload: 0 });
            flushSync(() => {
                if (refs.floating.current && !newOpen) {
                    refs.floating.current.scrollTop = 0;
                }
                setTimeout(() => {
                    setOpen(newOpen);
                }, 1);
            });
        },
        whileElementsMounted: (reference, floating, update) => {
            autoUpdate(reference, floating, update);
            return () => {
                floating.scrollTop = 0;
            };
        },
        middleware: [
            flip({ padding: 10 }),
            size({
                apply({ rects, elements }) {
                    requestAnimationFrame(() => {
                        Object.assign(elements.floating.style, {
                            width: `calc(${rects.reference.width}px - calc(var(--fds-spacing-2) * 2))`,
                            maxHeight: `200px`,
                        });
                    });
                },
            }),
            offset(10),
        ],
    });
    const role = useRole(context, { role: 'listbox' });
    const dismiss = useDismiss(context);
    const listNav = useListNavigation(context, {
        listRef,
        activeIndex,
        virtual: true,
        scrollItemIntoView: true,
        enabled: open,
        focusItemOnHover: true,
        onNavigate: (index) => {
            dispatch?.({ type: 'SET_ACTIVE_INDEX', payload: index || 0 });
        },
    });
    const { getReferenceProps, getFloatingProps, getItemProps } = useInteractions([role, dismiss, listNav]);
    return {
        open,
        setOpen,
        activeIndex,
        refs,
        floatingStyles,
        context,
        getReferenceProps,
        getFloatingProps,
        getItemProps,
    };
};

export { useFloatingCombobox };
