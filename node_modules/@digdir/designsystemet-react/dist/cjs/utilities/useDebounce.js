'use client';
'use strict';

var React = require('react');

function useDebounce(callback, delay = 50) {
    const timeoutRef = React.useRef(null);
    React.useEffect(() => {
        // Cleanup the previous timeout on re-render
        return () => {
            if (timeoutRef.current) {
                clearTimeout(timeoutRef.current);
            }
        };
    }, []);
    const debouncedCallback = (...args) => {
        if (timeoutRef.current) {
            clearTimeout(timeoutRef.current);
        }
        timeoutRef.current = setTimeout(() => {
            callback(...args);
        }, delay);
    };
    return debouncedCallback;
}

module.exports = useDebounce;
