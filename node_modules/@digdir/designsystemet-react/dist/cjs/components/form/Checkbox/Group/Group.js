'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var Fieldset = require('../../Fieldset/Fieldset.js');

const CheckboxGroupContext = React.createContext(null);
const CheckboxGroup = React.forwardRef(({ onChange, children, value, readOnly, defaultValue, size = 'md', ...rest }, ref) => {
    const [internalValue, setInternalValue] = React.useState(defaultValue ?? []);
    const toggleValue = (checkboxValue) => {
        const currentValue = value ?? internalValue;
        const updatedValue = currentValue.includes(checkboxValue)
            ? currentValue.filter((x) => x !== checkboxValue)
            : [...currentValue, checkboxValue];
        if (typeof value !== 'undefined' || value !== null) {
            setInternalValue(updatedValue);
        }
        onChange?.(updatedValue);
    };
    return (jsxRuntime.jsx(Fieldset.Fieldset, { readOnly: readOnly, size: size, ref: ref, ...rest, children: jsxRuntime.jsx(CheckboxGroupContext.Provider, { value: {
                value,
                defaultValue,
                toggleValue,
            }, children: jsxRuntime.jsx("div", { children: children }) }) }));
});
CheckboxGroup.displayName = 'CheckboxGroup';

exports.CheckboxGroup = CheckboxGroup;
exports.CheckboxGroupContext = CheckboxGroupContext;
