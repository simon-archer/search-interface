'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var akselIcons = require('@navikt/aksel-icons');
var lite = require('../../../node_modules/clsx/dist/lite.js');
var Group = require('../Group/Group.js');
var getSize = require('../../../utilities/getSize.js');
var Paragraph = require('../../Typography/Paragraph/Paragraph.js');

const RemovableChip = React.forwardRef(({ children, className, ...rest }, ref) => {
    const group = React.useContext(Group.ChipGroupContext);
    const size = getSize.getSize(rest.size || 'md');
    return (jsxRuntime.jsx("button", { type: 'button', ref: ref, className: lite.clsx(`fds-focus`, `fds-chip--button`, `fds-chip--removable`, `fds-chip--${group?.size || size}`, className), ...rest, children: jsxRuntime.jsx(Paragraph.Paragraph, { asChild: true, size: group?.size || size, variant: 'short', children: jsxRuntime.jsxs("span", { className: `fds-chip__label`, children: [jsxRuntime.jsx("span", { children: children }), jsxRuntime.jsx("span", { className: `fds-chip__x-mark`, "aria-hidden": true, children: jsxRuntime.jsx(akselIcons.XMarkIcon, { className: `fds-chip__icon` }) })] }) }) }));
});
RemovableChip.displayName = 'ChipRemovable';

exports.RemovableChip = RemovableChip;
