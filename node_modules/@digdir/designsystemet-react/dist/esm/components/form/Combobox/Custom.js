'use client';
import { jsx } from 'react/jsx-runtime';
import { forwardRef, useId, useContext, useMemo } from 'react';
import { clsx } from '../../../node_modules/clsx/dist/lite.js';
import { Slot as $5e63c961fc1ce211$export$8c6ed5c666ac1360 } from '../../../node_modules/@radix-ui/react-slot/dist/index.js';
import { useMergeRefs } from '../../../node_modules/@floating-ui/react/dist/floating-ui.react.js';
import { ComboboxContext } from './ComboboxContext.js';
import { useComboboxId } from './ComboboxIdContext.js';
import { omit } from '../../../utilities/objectUtils.js';

const ComboboxCustom = forwardRef(({ asChild, interactive, id, className, ...rest }, ref) => {
    if (interactive && !id) {
        throw new Error('If ComboboxCustom is interactive, it must have an id');
    }
    const Component = asChild ? $5e63c961fc1ce211$export$8c6ed5c666ac1360 : 'div';
    const randomId = useId();
    const { activeIndex } = useComboboxId();
    const context = useContext(ComboboxContext);
    if (!context) {
        throw new Error('ComboboxCustom must be used within a Combobox');
    }
    const { customIds, listRef, getItemProps } = context;
    const index = useMemo(() => (id && customIds.indexOf(id)) || 0, [id, customIds]);
    const combinedRef = useMergeRefs([
        (node) => {
            listRef.current[index] = node;
        },
        ref,
    ]);
    return (jsx(Component, { ref: combinedRef, tabIndex: -1, className: clsx('fds-combobox__custom', className), id: id || randomId, role: 'option', "aria-selected": activeIndex === index, "data-active": activeIndex === index, ...omit(['interactive'], rest), ...omit(['onClick', 'onPointerLeave'], getItemProps()) }));
});
var ComboboxCustom$1 = ComboboxCustom;

export { ComboboxCustom, ComboboxCustom$1 as default };
