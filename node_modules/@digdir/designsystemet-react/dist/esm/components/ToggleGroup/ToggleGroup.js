'use client';
import { jsx, jsxs } from 'react/jsx-runtime';
import { createContext, forwardRef, useId, useState } from 'react';
import { clsx } from '../../node_modules/clsx/dist/lite.js';
import { getSize } from '../../utilities/getSize.js';
import { RovingTabindexRoot } from '../../utilities/RovingTabIndex/RovingTabindexRoot.js';

const ToggleGroupContext = createContext({});
/** `ToggleGroup` component.
 * @example
 * ```tsx
 * <ToggleGroup onChange={(value) => console.log(value)}>
 *   <ToggleGroup.Item value='1'>Toggle 1</ToggleGroup.Item>
 *   <ToggleGroup.Item value='2'>Toggle 2</ToggleGroup.Item>
 *   <ToggleGroup.Item value='3'>Toggle 3</ToggleGroup.Item>
 * </ToggleGroup>
 * ```
 */
const ToggleGroup = forwardRef(({ children, value, defaultValue, onChange, name, className, ...rest }, ref) => {
    const size = getSize(rest.size || 'md');
    const nameId = useId();
    const isControlled = value !== undefined;
    const [uncontrolledValue, setUncontrolledValue] = useState(defaultValue);
    let onValueChange = onChange;
    if (!isControlled) {
        onValueChange = (newValue) => {
            setUncontrolledValue(newValue);
            onChange?.(newValue);
        };
        value = uncontrolledValue;
    }
    return (jsx("div", { className: clsx('fds-togglegroup', className), ref: ref, ...rest, children: jsxs(ToggleGroupContext.Provider, { value: {
                value,
                defaultValue,
                name: name ?? `togglegroup-name-${nameId}`,
                onChange: onValueChange,
                size,
            }, children: [name && (jsx("input", { className: 'fds-togglegroup__input', name: name, value: value })), jsx(RovingTabindexRoot, { asChild: true, valueId: value, children: jsx("div", { className: 'fds-togglegroup__content', role: 'radiogroup', children: children }) })] }) }));
});
ToggleGroup.displayName = 'ToggleGroup';

export { ToggleGroup, ToggleGroupContext };
