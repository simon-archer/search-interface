'use client';
'use strict';

var React = require('react');
var ReactDOM = require('react-dom');
var index = require('../../../virtual-core/dist/esm/index.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

const useIsomorphicLayoutEffect = typeof document !== "undefined" ? React__namespace.useLayoutEffect : React__namespace.useEffect;
function useVirtualizerBase(options) {
  const rerender = React__namespace.useReducer(() => ({}), {})[1];
  const resolvedOptions = {
    ...options,
    onChange: (instance2, sync) => {
      var _a;
      if (sync) {
        ReactDOM.flushSync(rerender);
      } else {
        rerender();
      }
      (_a = options.onChange) == null ? void 0 : _a.call(options, instance2, sync);
    }
  };
  const [instance] = React__namespace.useState(
    () => new index.Virtualizer(resolvedOptions)
  );
  instance.setOptions(resolvedOptions);
  React__namespace.useEffect(() => {
    return instance._didMount();
  }, []);
  useIsomorphicLayoutEffect(() => {
    return instance._willUpdate();
  });
  return instance;
}
function useVirtualizer(options) {
  return useVirtualizerBase({
    observeElementRect: index.observeElementRect,
    observeElementOffset: index.observeElementOffset,
    scrollToFn: index.elementScroll,
    ...options
  });
}

exports.Virtualizer = index.Virtualizer;
exports.defaultKeyExtractor = index.defaultKeyExtractor;
exports.defaultRangeExtractor = index.defaultRangeExtractor;
exports.elementScroll = index.elementScroll;
exports.measureElement = index.measureElement;
exports.observeElementOffset = index.observeElementOffset;
exports.observeElementRect = index.observeElementRect;
exports.useVirtualizer = useVirtualizer;
