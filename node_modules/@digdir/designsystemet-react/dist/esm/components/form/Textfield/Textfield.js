'use client';
import { jsx, jsxs } from 'react/jsx-runtime';
import { forwardRef, useState, useId } from 'react';
import { clsx } from '../../../node_modules/clsx/dist/lite.js';
import { PadlockLockedFillIcon } from '@navikt/aksel-icons';
import { CharacterCounter } from '../CharacterCounter.js';
import { useTextfield } from './useTextfield.js';
import { Paragraph } from '../../Typography/Paragraph/Paragraph.js';
import { Label } from '../../Typography/Label/Label.js';
import { omit } from '../../../utilities/objectUtils.js';
import { ErrorMessage } from '../../Typography/ErrorMessage/ErrorMessage.js';

/** Text input field
 *
 * @example
 * ```tsx
 * <Textfield label="Textfield label">
 * ```
 */
const Textfield = forwardRef((props, ref) => {
    const { label, description, suffix, prefix, style, characterLimit, hideLabel, type = 'text', htmlSize = 20, className, ...rest } = props;
    const { inputProps, descriptionId, hasError, errorId, size = 'md', readOnly, } = useTextfield(props);
    const [inputValue, setInputValue] = useState(props.value || props.defaultValue);
    const characterLimitId = `textfield-charactercount-${useId()}`;
    const hasCharacterLimit = characterLimit != null;
    const describedBy = clsx(inputProps['aria-describedby'], hasCharacterLimit && characterLimitId) || undefined;
    return (jsx(Paragraph, { asChild: true, size: size, children: jsxs("div", { style: style, className: clsx(`fds-textfield`, `fds-textfield--${size}`, readOnly && `fds-textfield--readonly`, hasError && `fds-textfield--error`, className), children: [label && (jsxs(Label, { size: size, weight: 'medium', htmlFor: inputProps.id, className: clsx(`fds-textfield__label`, hideLabel && `fds-sr-only`), children: [readOnly && (jsx(PadlockLockedFillIcon, { "aria-hidden": true, className: 'fds-textfield__readonly__icon' })), jsx("span", { children: label })] })), description && (jsx(Paragraph, { asChild: true, size: size, children: jsx("div", { id: descriptionId, className: clsx(`fds-textfield__description`, hideLabel && `fds-sr-only`), children: description }) })), jsxs("div", { className: 'fds-textfield__field', children: [prefix && (jsx(Paragraph, { asChild: true, size: size, variant: 'short', children: jsx("div", { className: clsx(`fds-textfield__adornment`, `fds-textfield__prefix`), "aria-hidden": 'true', children: prefix }) })), jsx("input", { className: clsx(`fds-textfield__input`, `fds-focus`, prefix && `fds-textfield__input--with-prefix`, suffix && `fds-textfield__input--with-suffix`), ref: ref, type: type, disabled: inputProps.disabled, "aria-describedby": describedBy, size: htmlSize, ...omit(['size', 'error', 'errorId'], rest), ...inputProps, onChange: (e) => {
                                inputProps?.onChange?.(e);
                                setInputValue(e.target.value);
                            } }), suffix && (jsx(Paragraph, { asChild: true, size: size, variant: 'short', children: jsx("div", { className: clsx(`fds-textfield__adornment`, `fds-textfield__suffix`), "aria-hidden": 'true', children: suffix }) }))] }), hasCharacterLimit && (jsx(CharacterCounter, { size: size, value: inputValue ? inputValue.toString() : '', id: characterLimitId, ...characterLimit })), jsx("div", { className: 'fds-textfield__error-message', id: errorId, "aria-live": 'polite', "aria-relevant": 'additions removals', children: hasError && jsx(ErrorMessage, { size: size, children: props.error }) })] }) }));
});
Textfield.displayName = 'Textfield';

export { Textfield };
