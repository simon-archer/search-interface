{"ast":null,"code":"'use client';\n\nimport { useState, useEffect } from 'react';\nconst getSteps = _ref => {\n  let {\n    compact,\n    currentPage,\n    totalPages\n  } = _ref;\n  /**  Number of always visible pages at the start and end. */\n  const boundaryCount = 1;\n  /** Number of always visible pages before and after the current page. */\n  const siblingCount = compact ? 0 : 1;\n  const range = (start, end) => Array.from({\n    length: end - start + 1\n  }, (_, i) => start + i);\n  if (totalPages <= (boundaryCount + siblingCount) * 2 + 3) return range(1, totalPages);\n  const startPages = range(1, boundaryCount);\n  const endPages = range(totalPages - boundaryCount + 1, totalPages);\n  const siblingsStart = Math.max(Math.min(currentPage - siblingCount, totalPages - boundaryCount - siblingCount * 2 - 1), boundaryCount + 2);\n  const siblingsEnd = siblingsStart + siblingCount * 2;\n  return [...startPages, siblingsStart - (startPages[startPages.length - 1] ?? 0) === 2 ? siblingsStart - 1 : 'ellipsis', ...range(siblingsStart, siblingsEnd), (endPages[0] ?? totalPages + 1) - siblingsEnd === 2 ? siblingsEnd + 1 : 'ellipsis', ...endPages];\n};\n/** Hook to help manage pagination state */\nconst usePagination = _ref2 => {\n  let {\n    totalPages,\n    currentPage: currentPageProps = 1,\n    compact\n  } = _ref2;\n  const [currentPage, setCurrentPage] = useState(currentPageProps);\n  useEffect(() => {\n    setCurrentPage(currentPageProps);\n  }, [currentPageProps]);\n  const pages = getSteps({\n    currentPage,\n    totalPages,\n    compact\n  });\n  const showNextPage = currentPage < totalPages;\n  const showPreviousPage = currentPage !== 1;\n  const nextPage = () => {\n    setCurrentPage(currentPage + 1 <= totalPages ? currentPage + 1 : totalPages);\n  };\n  const previousPage = () => {\n    setCurrentPage(currentPage - 1 > 0 ? currentPage - 1 : 1);\n  };\n  return {\n    /** Number of steps */\n    pages,\n    /** Current active page  */\n    currentPage,\n    /** Set active page */\n    setCurrentPage,\n    /** Decrements active page by 1 */\n    previousPage,\n    /** Increments active page by 1 */\n    nextPage,\n    /** Total amount of pages */\n    totalPages,\n    /** Indication if next page action should be shown or not */\n    showNextPage,\n    /** Indication if previous page action should be shown or not */\n    showPreviousPage\n  };\n};\nexport { usePagination };","map":{"version":3,"names":["useState","useEffect","getSteps","_ref","compact","currentPage","totalPages","boundaryCount","siblingCount","range","start","end","Array","from","length","_","i","startPages","endPages","siblingsStart","Math","max","min","siblingsEnd","usePagination","_ref2","currentPageProps","setCurrentPage","pages","showNextPage","showPreviousPage","nextPage","previousPage"],"sources":["/Users/simondreyer/CascadeProjects/search-interface/node_modules/@digdir/designsystemet-react/dist/esm/components/Pagination/usePagination.js"],"sourcesContent":["'use client';\nimport { useState, useEffect } from 'react';\n\nconst getSteps = ({ compact, currentPage, totalPages, }) => {\n    /**  Number of always visible pages at the start and end. */\n    const boundaryCount = 1;\n    /** Number of always visible pages before and after the current page. */\n    const siblingCount = compact ? 0 : 1;\n    const range = (start, end) => Array.from({ length: end - start + 1 }, (_, i) => start + i);\n    if (totalPages <= (boundaryCount + siblingCount) * 2 + 3)\n        return range(1, totalPages);\n    const startPages = range(1, boundaryCount);\n    const endPages = range(totalPages - boundaryCount + 1, totalPages);\n    const siblingsStart = Math.max(Math.min(currentPage - siblingCount, totalPages - boundaryCount - siblingCount * 2 - 1), boundaryCount + 2);\n    const siblingsEnd = siblingsStart + siblingCount * 2;\n    return [\n        ...startPages,\n        siblingsStart - (startPages[startPages.length - 1] ?? 0) === 2\n            ? siblingsStart - 1\n            : 'ellipsis',\n        ...range(siblingsStart, siblingsEnd),\n        (endPages[0] ?? totalPages + 1) - siblingsEnd === 2\n            ? siblingsEnd + 1\n            : 'ellipsis',\n        ...endPages,\n    ];\n};\n/** Hook to help manage pagination state */\nconst usePagination = ({ totalPages, currentPage: currentPageProps = 1, compact, }) => {\n    const [currentPage, setCurrentPage] = useState(currentPageProps);\n    useEffect(() => {\n        setCurrentPage(currentPageProps);\n    }, [currentPageProps]);\n    const pages = getSteps({ currentPage, totalPages, compact });\n    const showNextPage = currentPage < totalPages;\n    const showPreviousPage = currentPage !== 1;\n    const nextPage = () => {\n        setCurrentPage(currentPage + 1 <= totalPages ? currentPage + 1 : totalPages);\n    };\n    const previousPage = () => {\n        setCurrentPage(currentPage - 1 > 0 ? currentPage - 1 : 1);\n    };\n    return {\n        /** Number of steps */\n        pages,\n        /** Current active page  */\n        currentPage,\n        /** Set active page */\n        setCurrentPage,\n        /** Decrements active page by 1 */\n        previousPage,\n        /** Increments active page by 1 */\n        nextPage,\n        /** Total amount of pages */\n        totalPages,\n        /** Indication if next page action should be shown or not */\n        showNextPage,\n        /** Indication if previous page action should be shown or not */\n        showPreviousPage,\n    };\n};\n\nexport { usePagination };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}