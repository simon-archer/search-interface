'use client';
import { jsx } from 'react/jsx-runtime';
import { createContext, forwardRef, useState } from 'react';
import { Fieldset } from '../../Fieldset/Fieldset.js';

const CheckboxGroupContext = createContext(null);
const CheckboxGroup = forwardRef(({ onChange, children, value, readOnly, defaultValue, size = 'md', ...rest }, ref) => {
    const [internalValue, setInternalValue] = useState(defaultValue ?? []);
    const toggleValue = (checkboxValue) => {
        const currentValue = value ?? internalValue;
        const updatedValue = currentValue.includes(checkboxValue)
            ? currentValue.filter((x) => x !== checkboxValue)
            : [...currentValue, checkboxValue];
        if (typeof value !== 'undefined' || value !== null) {
            setInternalValue(updatedValue);
        }
        onChange?.(updatedValue);
    };
    return (jsx(Fieldset, { readOnly: readOnly, size: size, ref: ref, ...rest, children: jsx(CheckboxGroupContext.Provider, { value: {
                value,
                defaultValue,
                toggleValue,
            }, children: jsx("div", { children: children }) }) }));
});
CheckboxGroup.displayName = 'CheckboxGroup';

export { CheckboxGroup, CheckboxGroupContext };
