import type { AnchorHTMLAttributes, ReactNode } from 'react';
export type LinkProps = {
    /** The content to display inside the link. */
    children: ReactNode;
    /** Custom class name for the link. This will be appended to the design system class names. */
    className?: string;
    /** Inverts the color of the link. Use this on dark backgrounds. */
    inverted?: boolean;
    /** The URL that the link points to. This can also be an email address (starting with `mailto:`) or a phone number (staring with `tel:`). */
    href?: string;
    /**
     * Change the default rendered element for the one passed as a child, merging their props and behavior.
     * @default false
     */
    asChild?: boolean;
} & AnchorHTMLAttributes<HTMLAnchorElement>;
export declare const Link: import("react").ForwardRefExoticComponent<{
    /** The content to display inside the link. */
    children: ReactNode;
    /** Custom class name for the link. This will be appended to the design system class names. */
    className?: string | undefined;
    /** Inverts the color of the link. Use this on dark backgrounds. */
    inverted?: boolean | undefined;
    /** The URL that the link points to. This can also be an email address (starting with `mailto:`) or a phone number (staring with `tel:`). */
    href?: string | undefined;
    /**
     * Change the default rendered element for the one passed as a child, merging their props and behavior.
     * @default false
     */
    asChild?: boolean | undefined;
} & AnchorHTMLAttributes<HTMLAnchorElement> & import("react").RefAttributes<HTMLAnchorElement>>;
//# sourceMappingURL=Link.d.ts.map