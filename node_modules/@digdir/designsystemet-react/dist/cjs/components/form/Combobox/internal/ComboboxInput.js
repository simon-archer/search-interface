'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var lite = require('../../../../node_modules/clsx/dist/lite.js');
var akselIcons = require('@navikt/aksel-icons');
var floatingUi_react = require('../../../../node_modules/@floating-ui/react/dist/floating-ui.react.js');
var ComboboxContext = require('../ComboboxContext.js');
var ComboboxIdContext = require('../ComboboxIdContext.js');
var useCombobox = require('../useCombobox.js');
var ComboboxChips = require('./ComboboxChips.js');
var ComboboxClearButton = require('./ComboboxClearButton.js');
var Box = require('../../../Box/Box.js');
var objectUtils = require('../../../../utilities/objectUtils.js');

const ComboboxInput = ({ hideClearButton, listId, error, hideChips, handleKeyDown, ...rest }) => {
    const context = React.useContext(ComboboxContext.ComboboxContext);
    const idDispatch = ComboboxIdContext.useComboboxIdDispatch();
    if (!context) {
        throw new Error('ComboboxContext is missing');
    }
    const setActiveIndex = (id) => {
        idDispatch?.({ type: 'SET_ACTIVE_INDEX', payload: id });
    };
    const { forwareddRef, readOnly, disabled, open, inputRef, refs, inputValue, multiple, selectedOptions, formFieldProps, htmlSize, options, setOpen, getReferenceProps, setInputValue, handleSelectOption, } = context;
    const mergedRefs = floatingUi_react.useMergeRefs([forwareddRef, inputRef]);
    // onChange function for the input
    const onChange = (event) => {
        const value = event.target.value;
        setInputValue(value);
        setActiveIndex(0);
        // check if input value is the same as a label, if so, select it
        const option = options[useCombobox.prefix(value.toLowerCase())];
        if (!option)
            return;
        if (selectedOptions[useCombobox.prefix(option.value)])
            return;
        handleSelectOption({ option: option });
    };
    const showClearButton = multiple && !hideClearButton && Object.keys(selectedOptions).length > 0;
    /* Props from floating-ui */
    const props = getReferenceProps({
        ref: refs?.setReference,
        role: null,
        'aria-controls': null,
        'aria-expanded': null,
        'aria-haspopup': null,
        /* If we click the wrapper, open the list, set index to first option, and focus the input */
        onClick() {
            if (disabled)
                return;
            if (readOnly)
                return;
            setOpen(true);
            setActiveIndex(0);
            inputRef.current?.focus();
        },
        /* Handles list navigation */
        onKeyDown: handleKeyDown,
        // preventDefault on keydown to avoid sending in form
        onKeyPress(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
            }
        },
    });
    return (jsxRuntime.jsxs(Box.Box, { ...props, "aria-disabled": disabled, className: lite.clsx('fds-textfield__input', 'fds-combobox__input__wrapper', readOnly && 'fds-combobox--readonly', error && 'fds-combobox--error'), children: [jsxRuntime.jsxs("div", { className: 'fds-combobox__chip-and-input', children: [multiple && !hideChips && jsxRuntime.jsx(ComboboxChips.default, {}), jsxRuntime.jsx("input", { ref: mergedRefs, "aria-activedescendant": props['aria-activedescendant'], readOnly: readOnly, "aria-autocomplete": 'list', role: 'combobox', "aria-expanded": open, "aria-controls": open ? listId : undefined, autoComplete: 'off', size: htmlSize, value: inputValue, ...objectUtils.omit(['style', 'className'], rest), ...formFieldProps.inputProps, className: 'fds-combobox__input', onChange: (e) => {
                            onChange(e);
                            !open && setOpen(true);
                            rest.onChange && rest.onChange(e);
                        } })] }), showClearButton && jsxRuntime.jsx(ComboboxClearButton.default, {}), jsxRuntime.jsx("div", { className: 'fds-combobox__arrow', children: open ? (jsxRuntime.jsx(akselIcons.ChevronUpIcon, { title: 'arrow up', fontSize: '1.5em' })) : (jsxRuntime.jsx(akselIcons.ChevronDownIcon, { title: 'arrow down', fontSize: '1.5em' })) })] }));
};
ComboboxInput.displayName = 'ComboboxInput';
var ComboboxInput$1 = ComboboxInput;

exports.ComboboxInput = ComboboxInput;
exports.default = ComboboxInput$1;
