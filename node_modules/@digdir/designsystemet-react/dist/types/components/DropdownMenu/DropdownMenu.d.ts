import type * as React from 'react';
import type { Placement } from '@floating-ui/react';
import type { PortalProps } from '../../types/Portal';
type OldDropdownMenuSizes = 'small' | 'medium' | 'large';
export type DropdownMenuProps = {
    /** Whether the dropdown is open or not.
     * @default false
     */
    open?: boolean;
    /** Callback function when dropdown closes */
    onClose?: () => void;
    /** The placement of the dropdown
     * @default bottom-end
     */
    placement?: Placement;
    /**
     * The size of the dropdown
     * @default md
     * @note `small`, `medium`, `large` is deprecated
     **/
    size?: 'sm' | 'md' | 'lg' | OldDropdownMenuSizes;
    children: React.ReactNode;
} & PortalProps;
export declare const DropdownMenu: {
    ({ open, onClose, placement, portal, children, ...rest }: DropdownMenuProps): import("react/jsx-runtime").JSX.Element;
    displayName: string;
};
type DropdownMenuContextType = {
    anchorEl: Element | null;
    triggerRef: React.RefObject<Element>;
    size: NonNullable<DropdownMenuProps['size']>;
    portal?: PortalProps['portal'];
    placement?: DropdownMenuProps['placement'];
    internalOpen: boolean;
    isControlled?: boolean;
    setInternalOpen: (open: boolean) => void;
    onClose?: DropdownMenuProps['onClose'];
};
export declare const DropdownMenuContext: React.Context<DropdownMenuContextType>;
export {};
//# sourceMappingURL=DropdownMenu.d.ts.map