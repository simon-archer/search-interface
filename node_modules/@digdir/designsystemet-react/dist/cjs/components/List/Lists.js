'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var lite = require('../../node_modules/clsx/dist/lite.js');
var index = require('../../node_modules/@radix-ui/react-slot/dist/index.js');
var ListRoot = require('./ListRoot.js');
var Paragraph = require('../Typography/Paragraph/Paragraph.js');

const Unordered = React.forwardRef(({ asChild, ...rest }, ref) => {
    const { size, headingId } = React.useContext(ListRoot.ListContext);
    const Component = asChild ? index.Slot : 'ul';
    return (jsxRuntime.jsx(Paragraph.Paragraph, { size: size, asChild: true, children: jsxRuntime.jsx(Component, { className: lite.clsx(`fds-list`, `fds-list--${size}`, rest.className), ...(headingId ? { 'aria-labelledby': headingId } : {}), ref: ref, ...rest }) }));
});
Unordered.displayName = 'ListUnordered';
const Ordered = React.forwardRef(({ asChild, ...rest }, ref) => {
    const { size, headingId } = React.useContext(ListRoot.ListContext);
    const Component = asChild ? index.Slot : 'ol';
    return (jsxRuntime.jsx(Paragraph.Paragraph, { size: size, asChild: true, children: jsxRuntime.jsx(Component, { className: lite.clsx(`fds-list`, `fds-list--${size}`, rest.className), ...(headingId ? { 'aria-labelledby': headingId } : {}), ref: ref, ...rest }) }));
});
Ordered.displayName = 'ListOrdered';

exports.Ordered = Ordered;
exports.Unordered = Unordered;
