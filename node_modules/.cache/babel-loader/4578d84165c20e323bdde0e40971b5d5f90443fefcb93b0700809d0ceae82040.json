{"ast":null,"code":"'use client';\n\nimport { evaluate, getSide, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, getAlignmentSides, getAlignment, getSideAxis, clamp, getPaddingObject, rectToClientRect, getAlignmentAxis, getOppositeAxis, getAxisLength, min, max } from '../../utils/dist/floating-ui.utils.js';\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements,\n      middlewareData\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. To ensure `shift()` continues to take action,\n    // a single reset is performed when this is true.\n    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;\n    return {\n      [axis]: coords[axis] + alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset - alignmentOffset,\n        ...(shouldAddOffset && {\n          alignmentOffset\n        })\n      },\n      reset: shouldAddOffset\n    };\n  }\n});\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$arrow, _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n\n      // If a reset by the arrow was caused due to an alignment offset being\n      // added, we should skip any logic now since `flip()` has already done its\n      // work.\n      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\n\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      var _middlewareData$offse, _middlewareData$arrow;\n      const {\n        x,\n        y,\n        placement,\n        middlewareData\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n\n      // If the placement is the same and the arrow caused an alignment offset\n      // then we don't need to change the positioning coordinates.\n      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: {\n          ...diffCoords,\n          placement\n        }\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const overflowAvailableHeight = height - overflow[heightSide];\n      const overflowAvailableWidth = width - overflow[widthSide];\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if (isYAxis) {\n        const maximumClippingWidth = width - overflow.left - overflow.right;\n        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n      } else {\n        const maximumClippingHeight = height - overflow.top - overflow.bottom;\n        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\nexport { arrow, computePosition, detectOverflow, flip, offset, rectToClientRect, shift, size };","map":{"version":3,"names":["evaluate","getSide","getOppositePlacement","getExpandedPlacements","getOppositeAxisPlacements","getAlignmentSides","getAlignment","getSideAxis","clamp","getPaddingObject","rectToClientRect","getAlignmentAxis","getOppositeAxis","getAxisLength","min","max","computeCoordsFromPlacement","_ref","placement","rtl","reference","floating","sideAxis","alignmentAxis","alignLength","side","isVertical","commonX","x","width","commonY","y","height","commonAlign","coords","computePosition","config","strategy","middleware","platform","validMiddleware","filter","Boolean","isRTL","rects","getElementRects","statefulPlacement","middlewareData","resetCount","i","length","name","fn","nextX","nextY","data","reset","initialPlacement","elements","detectOverflow","state","options","_await$platform$isEle","boundary","rootBoundary","elementContext","altBoundary","padding","paddingObject","altContext","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","rect","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","top","bottom","left","right","arrow","axis","arrowDimensions","getDimensions","isYAxis","minProp","maxProp","clientProp","endDiff","startDiff","arrowOffsetParent","clientSize","centerToReference","largestPossiblePadding","minPadding","maxPadding","min$1","center","offset","shouldAddOffset","alignmentOffset","centerOffset","flip","_middlewareData$arrow","_middlewareData$flip","mainAxis","checkMainAxis","crossAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","flipAlignment","detectOverflowOptions","isBasePlacement","push","placements","overflow","overflows","overflowsData","sides","every","_middlewareData$flip2","_overflowsData$filter","nextIndex","index","nextPlacement","resetPlacement","d","sort","a","b","_overflowsData$map$so","map","reduce","acc","convertValueToCoords","alignment","mainAxisMulti","includes","crossAxisMulti","rawValue","_middlewareData$offse","diffCoords","shift","limiter","mainAxisCoord","crossAxisCoord","minSide","maxSide","limitedCoords","size","apply","heightSide","widthSide","overflowAvailableHeight","overflowAvailableWidth","noShift","availableHeight","availableWidth","maximumClippingWidth","maximumClippingHeight","xMin","xMax","yMin","yMax","nextDimensions"],"sources":["/Users/simondreyer/CascadeProjects/search-interface/node_modules/@digdir/designsystemet-react/dist/esm/node_modules/@floating-ui/core/dist/floating-ui.core.js"],"sourcesContent":["'use client';\nimport { evaluate, getSide, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, getAlignmentSides, getAlignment, getSideAxis, clamp, getPaddingObject, rectToClientRect, getAlignmentAxis, getOppositeAxis, getAxisLength, min, max } from '../../utils/dist/floating-ui.utils.js';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements,\n      middlewareData\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. To ensure `shift()` continues to take action,\n    // a single reset is performed when this is true.\n    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;\n    return {\n      [axis]: coords[axis] + alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset - alignmentOffset,\n        ...(shouldAddOffset && {\n          alignmentOffset\n        })\n      },\n      reset: shouldAddOffset\n    };\n  }\n});\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$arrow, _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n\n      // If a reset by the arrow was caused due to an alignment offset being\n      // added, we should skip any logic now since `flip()` has already done its\n      // work.\n      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\n\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      var _middlewareData$offse, _middlewareData$arrow;\n      const {\n        x,\n        y,\n        placement,\n        middlewareData\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n\n      // If the placement is the same and the arrow caused an alignment offset\n      // then we don't need to change the positioning coordinates.\n      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: {\n          ...diffCoords,\n          placement\n        }\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const overflowAvailableHeight = height - overflow[heightSide];\n      const overflowAvailableWidth = width - overflow[widthSide];\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if (isYAxis) {\n        const maximumClippingWidth = width - overflow.left - overflow.right;\n        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n      } else {\n        const maximumClippingHeight = height - overflow.top - overflow.bottom;\n        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, computePosition, detectOverflow, flip, offset, rectToClientRect, shift, size };\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,QAAQ,EAAEC,OAAO,EAAEC,oBAAoB,EAAEC,qBAAqB,EAAEC,yBAAyB,EAAEC,iBAAiB,EAAEC,YAAY,EAAEC,WAAW,EAAEC,KAAK,EAAEC,gBAAgB,EAAEC,gBAAgB,EAAEC,gBAAgB,EAAEC,eAAe,EAAEC,aAAa,EAAEC,GAAG,EAAEC,GAAG,QAAQ,uCAAuC;AAEtS,SAASC,0BAA0BA,CAACC,IAAI,EAAEC,SAAS,EAAEC,GAAG,EAAE;EACxD,IAAI;IACFC,SAAS;IACTC;EACF,CAAC,GAAGJ,IAAI;EACR,MAAMK,QAAQ,GAAGf,WAAW,CAACW,SAAS,CAAC;EACvC,MAAMK,aAAa,GAAGZ,gBAAgB,CAACO,SAAS,CAAC;EACjD,MAAMM,WAAW,GAAGX,aAAa,CAACU,aAAa,CAAC;EAChD,MAAME,IAAI,GAAGxB,OAAO,CAACiB,SAAS,CAAC;EAC/B,MAAMQ,UAAU,GAAGJ,QAAQ,KAAK,GAAG;EACnC,MAAMK,OAAO,GAAGP,SAAS,CAACQ,CAAC,GAAGR,SAAS,CAACS,KAAK,GAAG,CAAC,GAAGR,QAAQ,CAACQ,KAAK,GAAG,CAAC;EACtE,MAAMC,OAAO,GAAGV,SAAS,CAACW,CAAC,GAAGX,SAAS,CAACY,MAAM,GAAG,CAAC,GAAGX,QAAQ,CAACW,MAAM,GAAG,CAAC;EACxE,MAAMC,WAAW,GAAGb,SAAS,CAACI,WAAW,CAAC,GAAG,CAAC,GAAGH,QAAQ,CAACG,WAAW,CAAC,GAAG,CAAC;EAC1E,IAAIU,MAAM;EACV,QAAQT,IAAI;IACV,KAAK,KAAK;MACRS,MAAM,GAAG;QACPN,CAAC,EAAED,OAAO;QACVI,CAAC,EAAEX,SAAS,CAACW,CAAC,GAAGV,QAAQ,CAACW;MAC5B,CAAC;MACD;IACF,KAAK,QAAQ;MACXE,MAAM,GAAG;QACPN,CAAC,EAAED,OAAO;QACVI,CAAC,EAAEX,SAAS,CAACW,CAAC,GAAGX,SAAS,CAACY;MAC7B,CAAC;MACD;IACF,KAAK,OAAO;MACVE,MAAM,GAAG;QACPN,CAAC,EAAER,SAAS,CAACQ,CAAC,GAAGR,SAAS,CAACS,KAAK;QAChCE,CAAC,EAAED;MACL,CAAC;MACD;IACF,KAAK,MAAM;MACTI,MAAM,GAAG;QACPN,CAAC,EAAER,SAAS,CAACQ,CAAC,GAAGP,QAAQ,CAACQ,KAAK;QAC/BE,CAAC,EAAED;MACL,CAAC;MACD;IACF;MACEI,MAAM,GAAG;QACPN,CAAC,EAAER,SAAS,CAACQ,CAAC;QACdG,CAAC,EAAEX,SAAS,CAACW;MACf,CAAC;EACL;EACA,QAAQzB,YAAY,CAACY,SAAS,CAAC;IAC7B,KAAK,OAAO;MACVgB,MAAM,CAACX,aAAa,CAAC,IAAIU,WAAW,IAAId,GAAG,IAAIO,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;MACnE;IACF,KAAK,KAAK;MACRQ,MAAM,CAACX,aAAa,CAAC,IAAIU,WAAW,IAAId,GAAG,IAAIO,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;MACnE;EACJ;EACA,OAAOQ,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,MAAAA,CAAOf,SAAS,EAAEC,QAAQ,EAAEe,MAAM,KAAK;EAC7D,MAAM;IACJlB,SAAS,GAAG,QAAQ;IACpBmB,QAAQ,GAAG,UAAU;IACrBC,UAAU,GAAG,EAAE;IACfC;EACF,CAAC,GAAGH,MAAM;EACV,MAAMI,eAAe,GAAGF,UAAU,CAACG,MAAM,CAACC,OAAO,CAAC;EAClD,MAAMvB,GAAG,GAAG,OAAOoB,QAAQ,CAACI,KAAK,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGJ,QAAQ,CAACI,KAAK,CAACtB,QAAQ,CAAC,CAAC;EAC9E,IAAIuB,KAAK,GAAG,MAAML,QAAQ,CAACM,eAAe,CAAC;IACzCzB,SAAS;IACTC,QAAQ;IACRgB;EACF,CAAC,CAAC;EACF,IAAI;IACFT,CAAC;IACDG;EACF,CAAC,GAAGf,0BAA0B,CAAC4B,KAAK,EAAE1B,SAAS,EAAEC,GAAG,CAAC;EACrD,IAAI2B,iBAAiB,GAAG5B,SAAS;EACjC,IAAI6B,cAAc,GAAG,CAAC,CAAC;EACvB,IAAIC,UAAU,GAAG,CAAC;EAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,eAAe,CAACU,MAAM,EAAED,CAAC,EAAE,EAAE;IAC/C,MAAM;MACJE,IAAI;MACJC;IACF,CAAC,GAAGZ,eAAe,CAACS,CAAC,CAAC;IACtB,MAAM;MACJrB,CAAC,EAAEyB,KAAK;MACRtB,CAAC,EAAEuB,KAAK;MACRC,IAAI;MACJC;IACF,CAAC,GAAG,MAAMJ,EAAE,CAAC;MACXxB,CAAC;MACDG,CAAC;MACD0B,gBAAgB,EAAEvC,SAAS;MAC3BA,SAAS,EAAE4B,iBAAiB;MAC5BT,QAAQ;MACRU,cAAc;MACdH,KAAK;MACLL,QAAQ;MACRmB,QAAQ,EAAE;QACRtC,SAAS;QACTC;MACF;IACF,CAAC,CAAC;IACFO,CAAC,GAAGyB,KAAK,IAAI,IAAI,GAAGA,KAAK,GAAGzB,CAAC;IAC7BG,CAAC,GAAGuB,KAAK,IAAI,IAAI,GAAGA,KAAK,GAAGvB,CAAC;IAC7BgB,cAAc,GAAG;MACf,GAAGA,cAAc;MACjB,CAACI,IAAI,GAAG;QACN,GAAGJ,cAAc,CAACI,IAAI,CAAC;QACvB,GAAGI;MACL;IACF,CAAC;IACD,IAAIC,KAAK,IAAIR,UAAU,IAAI,EAAE,EAAE;MAC7BA,UAAU,EAAE;MACZ,IAAI,OAAOQ,KAAK,KAAK,QAAQ,EAAE;QAC7B,IAAIA,KAAK,CAACtC,SAAS,EAAE;UACnB4B,iBAAiB,GAAGU,KAAK,CAACtC,SAAS;QACrC;QACA,IAAIsC,KAAK,CAACZ,KAAK,EAAE;UACfA,KAAK,GAAGY,KAAK,CAACZ,KAAK,KAAK,IAAI,GAAG,MAAML,QAAQ,CAACM,eAAe,CAAC;YAC5DzB,SAAS;YACTC,QAAQ;YACRgB;UACF,CAAC,CAAC,GAAGmB,KAAK,CAACZ,KAAK;QAClB;QACA,CAAC;UACChB,CAAC;UACDG;QACF,CAAC,GAAGf,0BAA0B,CAAC4B,KAAK,EAAEE,iBAAiB,EAAE3B,GAAG,CAAC;MAC/D;MACA8B,CAAC,GAAG,CAAC,CAAC;IACR;EACF;EACA,OAAO;IACLrB,CAAC;IACDG,CAAC;IACDb,SAAS,EAAE4B,iBAAiB;IAC5BT,QAAQ;IACRU;EACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeY,cAAcA,CAACC,KAAK,EAAEC,OAAO,EAAE;EAC5C,IAAIC,qBAAqB;EACzB,IAAID,OAAO,KAAK,KAAK,CAAC,EAAE;IACtBA,OAAO,GAAG,CAAC,CAAC;EACd;EACA,MAAM;IACJjC,CAAC;IACDG,CAAC;IACDQ,QAAQ;IACRK,KAAK;IACLc,QAAQ;IACRrB;EACF,CAAC,GAAGuB,KAAK;EACT,MAAM;IACJG,QAAQ,GAAG,mBAAmB;IAC9BC,YAAY,GAAG,UAAU;IACzBC,cAAc,GAAG,UAAU;IAC3BC,WAAW,GAAG,KAAK;IACnBC,OAAO,GAAG;EACZ,CAAC,GAAGnE,QAAQ,CAAC6D,OAAO,EAAED,KAAK,CAAC;EAC5B,MAAMQ,aAAa,GAAG3D,gBAAgB,CAAC0D,OAAO,CAAC;EAC/C,MAAME,UAAU,GAAGJ,cAAc,KAAK,UAAU,GAAG,WAAW,GAAG,UAAU;EAC3E,MAAMK,OAAO,GAAGZ,QAAQ,CAACQ,WAAW,GAAGG,UAAU,GAAGJ,cAAc,CAAC;EACnE,MAAMM,kBAAkB,GAAG7D,gBAAgB,CAAC,MAAM6B,QAAQ,CAACiC,eAAe,CAAC;IACzEF,OAAO,EAAE,CAAC,CAACR,qBAAqB,GAAG,OAAOvB,QAAQ,CAACkC,SAAS,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGlC,QAAQ,CAACkC,SAAS,CAACH,OAAO,CAAC,CAAC,KAAK,IAAI,GAAGR,qBAAqB,GAAG,IAAI,IAAIQ,OAAO,GAAGA,OAAO,CAACI,cAAc,KAAK,OAAOnC,QAAQ,CAACoC,kBAAkB,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGpC,QAAQ,CAACoC,kBAAkB,CAACjB,QAAQ,CAACrC,QAAQ,CAAC,CAAC,CAAC;IACnS0C,QAAQ;IACRC,YAAY;IACZ3B;EACF,CAAC,CAAC,CAAC;EACH,MAAMuC,IAAI,GAAGX,cAAc,KAAK,UAAU,GAAG;IAC3C,GAAGrB,KAAK,CAACvB,QAAQ;IACjBO,CAAC;IACDG;EACF,CAAC,GAAGa,KAAK,CAACxB,SAAS;EACnB,MAAMyD,YAAY,GAAG,OAAOtC,QAAQ,CAACuC,eAAe,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGvC,QAAQ,CAACuC,eAAe,CAACpB,QAAQ,CAACrC,QAAQ,CAAC,CAAC;EACpH,MAAM0D,WAAW,GAAG,CAAC,OAAOxC,QAAQ,CAACkC,SAAS,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGlC,QAAQ,CAACkC,SAAS,CAACI,YAAY,CAAC,CAAC,IAAI,CAAC,OAAOtC,QAAQ,CAACyC,QAAQ,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGzC,QAAQ,CAACyC,QAAQ,CAACH,YAAY,CAAC,CAAC,KAAK;IACvLjD,CAAC,EAAE,CAAC;IACJG,CAAC,EAAE;EACL,CAAC,GAAG;IACFH,CAAC,EAAE,CAAC;IACJG,CAAC,EAAE;EACL,CAAC;EACD,MAAMkD,iBAAiB,GAAGvE,gBAAgB,CAAC6B,QAAQ,CAAC2C,qDAAqD,GAAG,MAAM3C,QAAQ,CAAC2C,qDAAqD,CAAC;IAC/KxB,QAAQ;IACRkB,IAAI;IACJC,YAAY;IACZxC;EACF,CAAC,CAAC,GAAGuC,IAAI,CAAC;EACV,OAAO;IACLO,GAAG,EAAE,CAACZ,kBAAkB,CAACY,GAAG,GAAGF,iBAAiB,CAACE,GAAG,GAAGf,aAAa,CAACe,GAAG,IAAIJ,WAAW,CAAChD,CAAC;IACzFqD,MAAM,EAAE,CAACH,iBAAiB,CAACG,MAAM,GAAGb,kBAAkB,CAACa,MAAM,GAAGhB,aAAa,CAACgB,MAAM,IAAIL,WAAW,CAAChD,CAAC;IACrGsD,IAAI,EAAE,CAACd,kBAAkB,CAACc,IAAI,GAAGJ,iBAAiB,CAACI,IAAI,GAAGjB,aAAa,CAACiB,IAAI,IAAIN,WAAW,CAACnD,CAAC;IAC7F0D,KAAK,EAAE,CAACL,iBAAiB,CAACK,KAAK,GAAGf,kBAAkB,CAACe,KAAK,GAAGlB,aAAa,CAACkB,KAAK,IAAIP,WAAW,CAACnD;EAClG,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM2D,KAAK,GAAG1B,OAAO,KAAK;EACxBV,IAAI,EAAE,OAAO;EACbU,OAAO;EACP,MAAMT,EAAEA,CAACQ,KAAK,EAAE;IACd,MAAM;MACJhC,CAAC;MACDG,CAAC;MACDb,SAAS;MACT0B,KAAK;MACLL,QAAQ;MACRmB,QAAQ;MACRX;IACF,CAAC,GAAGa,KAAK;IACT;IACA,MAAM;MACJU,OAAO;MACPH,OAAO,GAAG;IACZ,CAAC,GAAGnE,QAAQ,CAAC6D,OAAO,EAAED,KAAK,CAAC,IAAI,CAAC,CAAC;IAClC,IAAIU,OAAO,IAAI,IAAI,EAAE;MACnB,OAAO,CAAC,CAAC;IACX;IACA,MAAMF,aAAa,GAAG3D,gBAAgB,CAAC0D,OAAO,CAAC;IAC/C,MAAMjC,MAAM,GAAG;MACbN,CAAC;MACDG;IACF,CAAC;IACD,MAAMyD,IAAI,GAAG7E,gBAAgB,CAACO,SAAS,CAAC;IACxC,MAAMgC,MAAM,GAAGrC,aAAa,CAAC2E,IAAI,CAAC;IAClC,MAAMC,eAAe,GAAG,MAAMlD,QAAQ,CAACmD,aAAa,CAACpB,OAAO,CAAC;IAC7D,MAAMqB,OAAO,GAAGH,IAAI,KAAK,GAAG;IAC5B,MAAMI,OAAO,GAAGD,OAAO,GAAG,KAAK,GAAG,MAAM;IACxC,MAAME,OAAO,GAAGF,OAAO,GAAG,QAAQ,GAAG,OAAO;IAC5C,MAAMG,UAAU,GAAGH,OAAO,GAAG,cAAc,GAAG,aAAa;IAC3D,MAAMI,OAAO,GAAGnD,KAAK,CAACxB,SAAS,CAAC8B,MAAM,CAAC,GAAGN,KAAK,CAACxB,SAAS,CAACoE,IAAI,CAAC,GAAGtD,MAAM,CAACsD,IAAI,CAAC,GAAG5C,KAAK,CAACvB,QAAQ,CAAC6B,MAAM,CAAC;IACvG,MAAM8C,SAAS,GAAG9D,MAAM,CAACsD,IAAI,CAAC,GAAG5C,KAAK,CAACxB,SAAS,CAACoE,IAAI,CAAC;IACtD,MAAMS,iBAAiB,GAAG,OAAO1D,QAAQ,CAACuC,eAAe,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGvC,QAAQ,CAACuC,eAAe,CAACR,OAAO,CAAC,CAAC;IAC/G,IAAI4B,UAAU,GAAGD,iBAAiB,GAAGA,iBAAiB,CAACH,UAAU,CAAC,GAAG,CAAC;;IAEtE;IACA,IAAI,CAACI,UAAU,IAAI,EAAE,OAAO3D,QAAQ,CAACkC,SAAS,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGlC,QAAQ,CAACkC,SAAS,CAACwB,iBAAiB,CAAC,CAAC,CAAC,EAAE;MACzGC,UAAU,GAAGxC,QAAQ,CAACrC,QAAQ,CAACyE,UAAU,CAAC,IAAIlD,KAAK,CAACvB,QAAQ,CAAC6B,MAAM,CAAC;IACtE;IACA,MAAMiD,iBAAiB,GAAGJ,OAAO,GAAG,CAAC,GAAGC,SAAS,GAAG,CAAC;;IAErD;IACA;IACA,MAAMI,sBAAsB,GAAGF,UAAU,GAAG,CAAC,GAAGT,eAAe,CAACvC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC;IAC/E,MAAMmD,UAAU,GAAGvF,GAAG,CAACsD,aAAa,CAACwB,OAAO,CAAC,EAAEQ,sBAAsB,CAAC;IACtE,MAAME,UAAU,GAAGxF,GAAG,CAACsD,aAAa,CAACyB,OAAO,CAAC,EAAEO,sBAAsB,CAAC;;IAEtE;IACA;IACA,MAAMG,KAAK,GAAGF,UAAU;IACxB,MAAMtF,GAAG,GAAGmF,UAAU,GAAGT,eAAe,CAACvC,MAAM,CAAC,GAAGoD,UAAU;IAC7D,MAAME,MAAM,GAAGN,UAAU,GAAG,CAAC,GAAGT,eAAe,CAACvC,MAAM,CAAC,GAAG,CAAC,GAAGiD,iBAAiB;IAC/E,MAAMM,MAAM,GAAGjG,KAAK,CAAC+F,KAAK,EAAEC,MAAM,EAAEzF,GAAG,CAAC;;IAExC;IACA;IACA;IACA;IACA,MAAM2F,eAAe,GAAG,CAAC3D,cAAc,CAACwC,KAAK,IAAIjF,YAAY,CAACY,SAAS,CAAC,IAAI,IAAI,IAAIsF,MAAM,KAAKC,MAAM,IAAI7D,KAAK,CAACxB,SAAS,CAAC8B,MAAM,CAAC,GAAG,CAAC,IAAIsD,MAAM,GAAGD,KAAK,GAAGF,UAAU,GAAGC,UAAU,CAAC,GAAGb,eAAe,CAACvC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC;IACnN,MAAMyD,eAAe,GAAGD,eAAe,GAAGF,MAAM,GAAGD,KAAK,GAAGC,MAAM,GAAGD,KAAK,GAAGC,MAAM,GAAGzF,GAAG,GAAG,CAAC;IAC5F,OAAO;MACL,CAACyE,IAAI,GAAGtD,MAAM,CAACsD,IAAI,CAAC,GAAGmB,eAAe;MACtCpD,IAAI,EAAE;QACJ,CAACiC,IAAI,GAAGiB,MAAM;QACdG,YAAY,EAAEJ,MAAM,GAAGC,MAAM,GAAGE,eAAe;QAC/C,IAAID,eAAe,IAAI;UACrBC;QACF,CAAC;MACH,CAAC;MACDnD,KAAK,EAAEkD;IACT,CAAC;EACH;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,IAAI,GAAG,SAAAA,CAAUhD,OAAO,EAAE;EAC9B,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IACtBA,OAAO,GAAG,CAAC,CAAC;EACd;EACA,OAAO;IACLV,IAAI,EAAE,MAAM;IACZU,OAAO;IACP,MAAMT,EAAEA,CAACQ,KAAK,EAAE;MACd,IAAIkD,qBAAqB,EAAEC,oBAAoB;MAC/C,MAAM;QACJ7F,SAAS;QACT6B,cAAc;QACdH,KAAK;QACLa,gBAAgB;QAChBlB,QAAQ;QACRmB;MACF,CAAC,GAAGE,KAAK;MACT,MAAM;QACJoD,QAAQ,EAAEC,aAAa,GAAG,IAAI;QAC9BC,SAAS,EAAEC,cAAc,GAAG,IAAI;QAChCC,kBAAkB,EAAEC,2BAA2B;QAC/CC,gBAAgB,GAAG,SAAS;QAC5BC,yBAAyB,GAAG,MAAM;QAClCC,aAAa,GAAG,IAAI;QACpB,GAAGC;MACL,CAAC,GAAGzH,QAAQ,CAAC6D,OAAO,EAAED,KAAK,CAAC;;MAE5B;MACA;MACA;MACA;MACA,IAAI,CAACkD,qBAAqB,GAAG/D,cAAc,CAACwC,KAAK,KAAK,IAAI,IAAIuB,qBAAqB,CAACH,eAAe,EAAE;QACnG,OAAO,CAAC,CAAC;MACX;MACA,MAAMlF,IAAI,GAAGxB,OAAO,CAACiB,SAAS,CAAC;MAC/B,MAAMwG,eAAe,GAAGzH,OAAO,CAACwD,gBAAgB,CAAC,KAAKA,gBAAgB;MACtE,MAAMtC,GAAG,GAAG,OAAOoB,QAAQ,CAACI,KAAK,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGJ,QAAQ,CAACI,KAAK,CAACe,QAAQ,CAACrC,QAAQ,CAAC,CAAC;MACvF,MAAM+F,kBAAkB,GAAGC,2BAA2B,KAAKK,eAAe,IAAI,CAACF,aAAa,GAAG,CAACtH,oBAAoB,CAACuD,gBAAgB,CAAC,CAAC,GAAGtD,qBAAqB,CAACsD,gBAAgB,CAAC,CAAC;MAClL,IAAI,CAAC4D,2BAA2B,IAAIE,yBAAyB,KAAK,MAAM,EAAE;QACxEH,kBAAkB,CAACO,IAAI,CAAC,GAAGvH,yBAAyB,CAACqD,gBAAgB,EAAE+D,aAAa,EAAED,yBAAyB,EAAEpG,GAAG,CAAC,CAAC;MACxH;MACA,MAAMyG,UAAU,GAAG,CAACnE,gBAAgB,EAAE,GAAG2D,kBAAkB,CAAC;MAC5D,MAAMS,QAAQ,GAAG,MAAMlE,cAAc,CAACC,KAAK,EAAE6D,qBAAqB,CAAC;MACnE,MAAMK,SAAS,GAAG,EAAE;MACpB,IAAIC,aAAa,GAAG,CAAC,CAAChB,oBAAoB,GAAGhE,cAAc,CAAC8D,IAAI,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGE,oBAAoB,CAACe,SAAS,KAAK,EAAE;MAC1H,IAAIb,aAAa,EAAE;QACjBa,SAAS,CAACH,IAAI,CAACE,QAAQ,CAACpG,IAAI,CAAC,CAAC;MAChC;MACA,IAAI0F,cAAc,EAAE;QAClB,MAAMa,KAAK,GAAG3H,iBAAiB,CAACa,SAAS,EAAE0B,KAAK,EAAEzB,GAAG,CAAC;QACtD2G,SAAS,CAACH,IAAI,CAACE,QAAQ,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC,EAAEH,QAAQ,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;MACxD;MACAD,aAAa,GAAG,CAAC,GAAGA,aAAa,EAAE;QACjC7G,SAAS;QACT4G;MACF,CAAC,CAAC;;MAEF;MACA,IAAI,CAACA,SAAS,CAACG,KAAK,CAACxG,IAAI,IAAIA,IAAI,IAAI,CAAC,CAAC,EAAE;QACvC,IAAIyG,qBAAqB,EAAEC,qBAAqB;QAChD,MAAMC,SAAS,GAAG,CAAC,CAAC,CAACF,qBAAqB,GAAGnF,cAAc,CAAC8D,IAAI,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGqB,qBAAqB,CAACG,KAAK,KAAK,CAAC,IAAI,CAAC;QAC3H,MAAMC,aAAa,GAAGV,UAAU,CAACQ,SAAS,CAAC;QAC3C,IAAIE,aAAa,EAAE;UACjB;UACA,OAAO;YACL/E,IAAI,EAAE;cACJ8E,KAAK,EAAED,SAAS;cAChBN,SAAS,EAAEC;YACb,CAAC;YACDvE,KAAK,EAAE;cACLtC,SAAS,EAAEoH;YACb;UACF,CAAC;QACH;;QAEA;QACA;QACA,IAAIC,cAAc,GAAG,CAACJ,qBAAqB,GAAGJ,aAAa,CAACtF,MAAM,CAAC+F,CAAC,IAAIA,CAAC,CAACV,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAACW,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACZ,SAAS,CAAC,CAAC,CAAC,GAAGa,CAAC,CAACb,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGK,qBAAqB,CAACjH,SAAS;;QAEnM;QACA,IAAI,CAACqH,cAAc,EAAE;UACnB,QAAQjB,gBAAgB;YACtB,KAAK,SAAS;cACZ;gBACE,IAAIsB,qBAAqB;gBACzB,MAAM1H,SAAS,GAAG,CAAC0H,qBAAqB,GAAGb,aAAa,CAACc,GAAG,CAACL,CAAC,IAAI,CAACA,CAAC,CAACtH,SAAS,EAAEsH,CAAC,CAACV,SAAS,CAACrF,MAAM,CAACoF,QAAQ,IAAIA,QAAQ,GAAG,CAAC,CAAC,CAACiB,MAAM,CAAC,CAACC,GAAG,EAAElB,QAAQ,KAAKkB,GAAG,GAAGlB,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,CAACY,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGC,qBAAqB,CAAC,CAAC,CAAC;gBACvP,IAAI1H,SAAS,EAAE;kBACbqH,cAAc,GAAGrH,SAAS;gBAC5B;gBACA;cACF;YACF,KAAK,kBAAkB;cACrBqH,cAAc,GAAG9E,gBAAgB;cACjC;UACJ;QACF;QACA,IAAIvC,SAAS,KAAKqH,cAAc,EAAE;UAChC,OAAO;YACL/E,KAAK,EAAE;cACLtC,SAAS,EAAEqH;YACb;UACF,CAAC;QACH;MACF;MACA,OAAO,CAAC,CAAC;IACX;EACF,CAAC;AACH,CAAC;;AAED;AACA;;AAEA,eAAeS,oBAAoBA,CAACpF,KAAK,EAAEC,OAAO,EAAE;EAClD,MAAM;IACJ3C,SAAS;IACTqB,QAAQ;IACRmB;EACF,CAAC,GAAGE,KAAK;EACT,MAAMzC,GAAG,GAAG,OAAOoB,QAAQ,CAACI,KAAK,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGJ,QAAQ,CAACI,KAAK,CAACe,QAAQ,CAACrC,QAAQ,CAAC,CAAC;EACvF,MAAMI,IAAI,GAAGxB,OAAO,CAACiB,SAAS,CAAC;EAC/B,MAAM+H,SAAS,GAAG3I,YAAY,CAACY,SAAS,CAAC;EACzC,MAAMQ,UAAU,GAAGnB,WAAW,CAACW,SAAS,CAAC,KAAK,GAAG;EACjD,MAAMgI,aAAa,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAACC,QAAQ,CAAC1H,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;EAC7D,MAAM2H,cAAc,GAAGjI,GAAG,IAAIO,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC;EACjD,MAAM2H,QAAQ,GAAGrJ,QAAQ,CAAC6D,OAAO,EAAED,KAAK,CAAC;EACzC,IAAI;IACFoD,QAAQ;IACRE,SAAS;IACT3F;EACF,CAAC,GAAG,OAAO8H,QAAQ,KAAK,QAAQ,GAAG;IACjCrC,QAAQ,EAAEqC,QAAQ;IAClBnC,SAAS,EAAE,CAAC;IACZ3F,aAAa,EAAE;EACjB,CAAC,GAAG;IACFyF,QAAQ,EAAE,CAAC;IACXE,SAAS,EAAE,CAAC;IACZ3F,aAAa,EAAE,IAAI;IACnB,GAAG8H;EACL,CAAC;EACD,IAAIJ,SAAS,IAAI,OAAO1H,aAAa,KAAK,QAAQ,EAAE;IAClD2F,SAAS,GAAG+B,SAAS,KAAK,KAAK,GAAG1H,aAAa,GAAG,CAAC,CAAC,GAAGA,aAAa;EACtE;EACA,OAAOG,UAAU,GAAG;IAClBE,CAAC,EAAEsF,SAAS,GAAGkC,cAAc;IAC7BrH,CAAC,EAAEiF,QAAQ,GAAGkC;EAChB,CAAC,GAAG;IACFtH,CAAC,EAAEoF,QAAQ,GAAGkC,aAAa;IAC3BnH,CAAC,EAAEmF,SAAS,GAAGkC;EACjB,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM3C,MAAM,GAAG,SAAAA,CAAU5C,OAAO,EAAE;EAChC,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IACtBA,OAAO,GAAG,CAAC;EACb;EACA,OAAO;IACLV,IAAI,EAAE,QAAQ;IACdU,OAAO;IACP,MAAMT,EAAEA,CAACQ,KAAK,EAAE;MACd,IAAI0F,qBAAqB,EAAExC,qBAAqB;MAChD,MAAM;QACJlF,CAAC;QACDG,CAAC;QACDb,SAAS;QACT6B;MACF,CAAC,GAAGa,KAAK;MACT,MAAM2F,UAAU,GAAG,MAAMP,oBAAoB,CAACpF,KAAK,EAAEC,OAAO,CAAC;;MAE7D;MACA;MACA,IAAI3C,SAAS,MAAM,CAACoI,qBAAqB,GAAGvG,cAAc,CAAC0D,MAAM,KAAK,IAAI,GAAG,KAAK,CAAC,GAAG6C,qBAAqB,CAACpI,SAAS,CAAC,IAAI,CAAC4F,qBAAqB,GAAG/D,cAAc,CAACwC,KAAK,KAAK,IAAI,IAAIuB,qBAAqB,CAACH,eAAe,EAAE;QACzN,OAAO,CAAC,CAAC;MACX;MACA,OAAO;QACL/E,CAAC,EAAEA,CAAC,GAAG2H,UAAU,CAAC3H,CAAC;QACnBG,CAAC,EAAEA,CAAC,GAAGwH,UAAU,CAACxH,CAAC;QACnBwB,IAAI,EAAE;UACJ,GAAGgG,UAAU;UACbrI;QACF;MACF,CAAC;IACH;EACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMsI,KAAK,GAAG,SAAAA,CAAU3F,OAAO,EAAE;EAC/B,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IACtBA,OAAO,GAAG,CAAC,CAAC;EACd;EACA,OAAO;IACLV,IAAI,EAAE,OAAO;IACbU,OAAO;IACP,MAAMT,EAAEA,CAACQ,KAAK,EAAE;MACd,MAAM;QACJhC,CAAC;QACDG,CAAC;QACDb;MACF,CAAC,GAAG0C,KAAK;MACT,MAAM;QACJoD,QAAQ,EAAEC,aAAa,GAAG,IAAI;QAC9BC,SAAS,EAAEC,cAAc,GAAG,KAAK;QACjCsC,OAAO,GAAG;UACRrG,EAAE,EAAEnC,IAAI,IAAI;YACV,IAAI;cACFW,CAAC;cACDG;YACF,CAAC,GAAGd,IAAI;YACR,OAAO;cACLW,CAAC;cACDG;YACF,CAAC;UACH;QACF,CAAC;QACD,GAAG0F;MACL,CAAC,GAAGzH,QAAQ,CAAC6D,OAAO,EAAED,KAAK,CAAC;MAC5B,MAAM1B,MAAM,GAAG;QACbN,CAAC;QACDG;MACF,CAAC;MACD,MAAM8F,QAAQ,GAAG,MAAMlE,cAAc,CAACC,KAAK,EAAE6D,qBAAqB,CAAC;MACnE,MAAMP,SAAS,GAAG3G,WAAW,CAACN,OAAO,CAACiB,SAAS,CAAC,CAAC;MACjD,MAAM8F,QAAQ,GAAGpG,eAAe,CAACsG,SAAS,CAAC;MAC3C,IAAIwC,aAAa,GAAGxH,MAAM,CAAC8E,QAAQ,CAAC;MACpC,IAAI2C,cAAc,GAAGzH,MAAM,CAACgF,SAAS,CAAC;MACtC,IAAID,aAAa,EAAE;QACjB,MAAM2C,OAAO,GAAG5C,QAAQ,KAAK,GAAG,GAAG,KAAK,GAAG,MAAM;QACjD,MAAM6C,OAAO,GAAG7C,QAAQ,KAAK,GAAG,GAAG,QAAQ,GAAG,OAAO;QACrD,MAAMlG,GAAG,GAAG4I,aAAa,GAAG7B,QAAQ,CAAC+B,OAAO,CAAC;QAC7C,MAAM7I,GAAG,GAAG2I,aAAa,GAAG7B,QAAQ,CAACgC,OAAO,CAAC;QAC7CH,aAAa,GAAGlJ,KAAK,CAACM,GAAG,EAAE4I,aAAa,EAAE3I,GAAG,CAAC;MAChD;MACA,IAAIoG,cAAc,EAAE;QAClB,MAAMyC,OAAO,GAAG1C,SAAS,KAAK,GAAG,GAAG,KAAK,GAAG,MAAM;QAClD,MAAM2C,OAAO,GAAG3C,SAAS,KAAK,GAAG,GAAG,QAAQ,GAAG,OAAO;QACtD,MAAMpG,GAAG,GAAG6I,cAAc,GAAG9B,QAAQ,CAAC+B,OAAO,CAAC;QAC9C,MAAM7I,GAAG,GAAG4I,cAAc,GAAG9B,QAAQ,CAACgC,OAAO,CAAC;QAC9CF,cAAc,GAAGnJ,KAAK,CAACM,GAAG,EAAE6I,cAAc,EAAE5I,GAAG,CAAC;MAClD;MACA,MAAM+I,aAAa,GAAGL,OAAO,CAACrG,EAAE,CAAC;QAC/B,GAAGQ,KAAK;QACR,CAACoD,QAAQ,GAAG0C,aAAa;QACzB,CAACxC,SAAS,GAAGyC;MACf,CAAC,CAAC;MACF,OAAO;QACL,GAAGG,aAAa;QAChBvG,IAAI,EAAE;UACJ3B,CAAC,EAAEkI,aAAa,CAAClI,CAAC,GAAGA,CAAC;UACtBG,CAAC,EAAE+H,aAAa,CAAC/H,CAAC,GAAGA;QACvB;MACF,CAAC;IACH;EACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgI,IAAI,GAAG,SAAAA,CAAUlG,OAAO,EAAE;EAC9B,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IACtBA,OAAO,GAAG,CAAC,CAAC;EACd;EACA,OAAO;IACLV,IAAI,EAAE,MAAM;IACZU,OAAO;IACP,MAAMT,EAAEA,CAACQ,KAAK,EAAE;MACd,MAAM;QACJ1C,SAAS;QACT0B,KAAK;QACLL,QAAQ;QACRmB;MACF,CAAC,GAAGE,KAAK;MACT,MAAM;QACJoG,KAAK,GAAGA,CAAA,KAAM,CAAC,CAAC;QAChB,GAAGvC;MACL,CAAC,GAAGzH,QAAQ,CAAC6D,OAAO,EAAED,KAAK,CAAC;MAC5B,MAAMiE,QAAQ,GAAG,MAAMlE,cAAc,CAACC,KAAK,EAAE6D,qBAAqB,CAAC;MACnE,MAAMhG,IAAI,GAAGxB,OAAO,CAACiB,SAAS,CAAC;MAC/B,MAAM+H,SAAS,GAAG3I,YAAY,CAACY,SAAS,CAAC;MACzC,MAAMyE,OAAO,GAAGpF,WAAW,CAACW,SAAS,CAAC,KAAK,GAAG;MAC9C,MAAM;QACJW,KAAK;QACLG;MACF,CAAC,GAAGY,KAAK,CAACvB,QAAQ;MAClB,IAAI4I,UAAU;MACd,IAAIC,SAAS;MACb,IAAIzI,IAAI,KAAK,KAAK,IAAIA,IAAI,KAAK,QAAQ,EAAE;QACvCwI,UAAU,GAAGxI,IAAI;QACjByI,SAAS,GAAGjB,SAAS,MAAM,CAAC,OAAO1G,QAAQ,CAACI,KAAK,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGJ,QAAQ,CAACI,KAAK,CAACe,QAAQ,CAACrC,QAAQ,CAAC,CAAC,IAAI,OAAO,GAAG,KAAK,CAAC,GAAG,MAAM,GAAG,OAAO;MAChJ,CAAC,MAAM;QACL6I,SAAS,GAAGzI,IAAI;QAChBwI,UAAU,GAAGhB,SAAS,KAAK,KAAK,GAAG,KAAK,GAAG,QAAQ;MACrD;MACA,MAAMkB,uBAAuB,GAAGnI,MAAM,GAAG6F,QAAQ,CAACoC,UAAU,CAAC;MAC7D,MAAMG,sBAAsB,GAAGvI,KAAK,GAAGgG,QAAQ,CAACqC,SAAS,CAAC;MAC1D,MAAMG,OAAO,GAAG,CAACzG,KAAK,CAACb,cAAc,CAACyG,KAAK;MAC3C,IAAIc,eAAe,GAAGH,uBAAuB;MAC7C,IAAII,cAAc,GAAGH,sBAAsB;MAC3C,IAAIzE,OAAO,EAAE;QACX,MAAM6E,oBAAoB,GAAG3I,KAAK,GAAGgG,QAAQ,CAACxC,IAAI,GAAGwC,QAAQ,CAACvC,KAAK;QACnEiF,cAAc,GAAGtB,SAAS,IAAIoB,OAAO,GAAGvJ,GAAG,CAACsJ,sBAAsB,EAAEI,oBAAoB,CAAC,GAAGA,oBAAoB;MAClH,CAAC,MAAM;QACL,MAAMC,qBAAqB,GAAGzI,MAAM,GAAG6F,QAAQ,CAAC1C,GAAG,GAAG0C,QAAQ,CAACzC,MAAM;QACrEkF,eAAe,GAAGrB,SAAS,IAAIoB,OAAO,GAAGvJ,GAAG,CAACqJ,uBAAuB,EAAEM,qBAAqB,CAAC,GAAGA,qBAAqB;MACtH;MACA,IAAIJ,OAAO,IAAI,CAACpB,SAAS,EAAE;QACzB,MAAMyB,IAAI,GAAG3J,GAAG,CAAC8G,QAAQ,CAACxC,IAAI,EAAE,CAAC,CAAC;QAClC,MAAMsF,IAAI,GAAG5J,GAAG,CAAC8G,QAAQ,CAACvC,KAAK,EAAE,CAAC,CAAC;QACnC,MAAMsF,IAAI,GAAG7J,GAAG,CAAC8G,QAAQ,CAAC1C,GAAG,EAAE,CAAC,CAAC;QACjC,MAAM0F,IAAI,GAAG9J,GAAG,CAAC8G,QAAQ,CAACzC,MAAM,EAAE,CAAC,CAAC;QACpC,IAAIO,OAAO,EAAE;UACX4E,cAAc,GAAG1I,KAAK,GAAG,CAAC,IAAI6I,IAAI,KAAK,CAAC,IAAIC,IAAI,KAAK,CAAC,GAAGD,IAAI,GAAGC,IAAI,GAAG5J,GAAG,CAAC8G,QAAQ,CAACxC,IAAI,EAAEwC,QAAQ,CAACvC,KAAK,CAAC,CAAC;QAC5G,CAAC,MAAM;UACLgF,eAAe,GAAGtI,MAAM,GAAG,CAAC,IAAI4I,IAAI,KAAK,CAAC,IAAIC,IAAI,KAAK,CAAC,GAAGD,IAAI,GAAGC,IAAI,GAAG9J,GAAG,CAAC8G,QAAQ,CAAC1C,GAAG,EAAE0C,QAAQ,CAACzC,MAAM,CAAC,CAAC;QAC9G;MACF;MACA,MAAM4E,KAAK,CAAC;QACV,GAAGpG,KAAK;QACR2G,cAAc;QACdD;MACF,CAAC,CAAC;MACF,MAAMQ,cAAc,GAAG,MAAMvI,QAAQ,CAACmD,aAAa,CAAChC,QAAQ,CAACrC,QAAQ,CAAC;MACtE,IAAIQ,KAAK,KAAKiJ,cAAc,CAACjJ,KAAK,IAAIG,MAAM,KAAK8I,cAAc,CAAC9I,MAAM,EAAE;QACtE,OAAO;UACLwB,KAAK,EAAE;YACLZ,KAAK,EAAE;UACT;QACF,CAAC;MACH;MACA,OAAO,CAAC,CAAC;IACX;EACF,CAAC;AACH,CAAC;AAED,SAAS2C,KAAK,EAAEpD,eAAe,EAAEwB,cAAc,EAAEkD,IAAI,EAAEJ,MAAM,EAAE/F,gBAAgB,EAAE8I,KAAK,EAAEO,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}