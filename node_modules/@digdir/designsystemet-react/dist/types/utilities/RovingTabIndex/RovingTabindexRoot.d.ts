import type { MutableRefObject, ReactNode, HTMLAttributes } from 'react';
export type RovingTabindexElement = {
    value: string;
    element: HTMLElement;
};
export type RovingTabindexProps = {
    elements: MutableRefObject<Map<string, HTMLElement>>;
    getOrderedItems: () => RovingTabindexElement[];
    setFocusableValue: (value: string) => void;
    focusableValue: string | null;
    onShiftTab: () => void;
};
export declare const RovingTabindexContext: import("react").Context<RovingTabindexProps>;
export declare const RovingTabindexRoot: import("react").ForwardRefExoticComponent<{
    /** The children of the `RovingTabindexRoot`. The children should get their roving-relevant props from the `useRovingTabIndex` hook. */
    children: ReactNode;
    /** The value of the element that should be focused when the `RovingTabindexRoot` receives focus. */
    valueId?: string | undefined;
    /**
     * Change the default rendered element for the one passed as a child, merging their props and behavior.
     * @default false
     */
    asChild?: boolean | undefined;
} & HTMLAttributes<HTMLElement> & import("react").RefAttributes<HTMLElement>>;
//# sourceMappingURL=RovingTabindexRoot.d.ts.map