{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { forwardRef, useState, useId } from 'react';\nimport { clsx } from '../../../node_modules/clsx/dist/lite.js';\nimport { PadlockLockedFillIcon } from '@navikt/aksel-icons';\nimport { CharacterCounter } from '../CharacterCounter.js';\nimport { useTextfield } from './useTextfield.js';\nimport { Paragraph } from '../../Typography/Paragraph/Paragraph.js';\nimport { Label } from '../../Typography/Label/Label.js';\nimport { omit } from '../../../utilities/objectUtils.js';\nimport { ErrorMessage } from '../../Typography/ErrorMessage/ErrorMessage.js';\n\n/** Text input field\n *\n * @example\n * ```tsx\n * <Textfield label=\"Textfield label\">\n * ```\n */\nconst Textfield = forwardRef((props, ref) => {\n  const {\n    label,\n    description,\n    suffix,\n    prefix,\n    style,\n    characterLimit,\n    hideLabel,\n    type = 'text',\n    htmlSize = 20,\n    className,\n    ...rest\n  } = props;\n  const {\n    inputProps,\n    descriptionId,\n    hasError,\n    errorId,\n    size = 'md',\n    readOnly\n  } = useTextfield(props);\n  const [inputValue, setInputValue] = useState(props.value || props.defaultValue);\n  const characterLimitId = `textfield-charactercount-${useId()}`;\n  const hasCharacterLimit = characterLimit != null;\n  const describedBy = clsx(inputProps['aria-describedby'], hasCharacterLimit && characterLimitId) || undefined;\n  return jsx(Paragraph, {\n    asChild: true,\n    size: size,\n    children: jsxs(\"div\", {\n      style: style,\n      className: clsx(`fds-textfield`, `fds-textfield--${size}`, readOnly && `fds-textfield--readonly`, hasError && `fds-textfield--error`, className),\n      children: [label && jsxs(Label, {\n        size: size,\n        weight: 'medium',\n        htmlFor: inputProps.id,\n        className: clsx(`fds-textfield__label`, hideLabel && `fds-sr-only`),\n        children: [readOnly && jsx(PadlockLockedFillIcon, {\n          \"aria-hidden\": true,\n          className: 'fds-textfield__readonly__icon'\n        }), jsx(\"span\", {\n          children: label\n        })]\n      }), description && jsx(Paragraph, {\n        asChild: true,\n        size: size,\n        children: jsx(\"div\", {\n          id: descriptionId,\n          className: clsx(`fds-textfield__description`, hideLabel && `fds-sr-only`),\n          children: description\n        })\n      }), jsxs(\"div\", {\n        className: 'fds-textfield__field',\n        children: [prefix && jsx(Paragraph, {\n          asChild: true,\n          size: size,\n          variant: 'short',\n          children: jsx(\"div\", {\n            className: clsx(`fds-textfield__adornment`, `fds-textfield__prefix`),\n            \"aria-hidden\": 'true',\n            children: prefix\n          })\n        }), jsx(\"input\", {\n          className: clsx(`fds-textfield__input`, `fds-focus`, prefix && `fds-textfield__input--with-prefix`, suffix && `fds-textfield__input--with-suffix`),\n          ref: ref,\n          type: type,\n          disabled: inputProps.disabled,\n          \"aria-describedby\": describedBy,\n          size: htmlSize,\n          ...omit(['size', 'error', 'errorId'], rest),\n          ...inputProps,\n          onChange: e => {\n            inputProps?.onChange?.(e);\n            setInputValue(e.target.value);\n          }\n        }), suffix && jsx(Paragraph, {\n          asChild: true,\n          size: size,\n          variant: 'short',\n          children: jsx(\"div\", {\n            className: clsx(`fds-textfield__adornment`, `fds-textfield__suffix`),\n            \"aria-hidden\": 'true',\n            children: suffix\n          })\n        })]\n      }), hasCharacterLimit && jsx(CharacterCounter, {\n        size: size,\n        value: inputValue ? inputValue.toString() : '',\n        id: characterLimitId,\n        ...characterLimit\n      }), jsx(\"div\", {\n        className: 'fds-textfield__error-message',\n        id: errorId,\n        \"aria-live\": 'polite',\n        \"aria-relevant\": 'additions removals',\n        children: hasError && jsx(ErrorMessage, {\n          size: size,\n          children: props.error\n        })\n      })]\n    })\n  });\n});\nTextfield.displayName = 'Textfield';\nexport { Textfield };","map":{"version":3,"names":["jsx","jsxs","forwardRef","useState","useId","clsx","PadlockLockedFillIcon","CharacterCounter","useTextfield","Paragraph","Label","omit","ErrorMessage","Textfield","props","ref","label","description","suffix","prefix","style","characterLimit","hideLabel","type","htmlSize","className","rest","inputProps","descriptionId","hasError","errorId","size","readOnly","inputValue","setInputValue","value","defaultValue","characterLimitId","hasCharacterLimit","describedBy","undefined","asChild","children","weight","htmlFor","id","variant","disabled","onChange","e","target","toString","error","displayName"],"sources":["/Users/simondreyer/CascadeProjects/search-interface/node_modules/@digdir/designsystemet-react/dist/esm/components/form/Textfield/Textfield.js"],"sourcesContent":["'use client';\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { forwardRef, useState, useId } from 'react';\nimport { clsx } from '../../../node_modules/clsx/dist/lite.js';\nimport { PadlockLockedFillIcon } from '@navikt/aksel-icons';\nimport { CharacterCounter } from '../CharacterCounter.js';\nimport { useTextfield } from './useTextfield.js';\nimport { Paragraph } from '../../Typography/Paragraph/Paragraph.js';\nimport { Label } from '../../Typography/Label/Label.js';\nimport { omit } from '../../../utilities/objectUtils.js';\nimport { ErrorMessage } from '../../Typography/ErrorMessage/ErrorMessage.js';\n\n/** Text input field\n *\n * @example\n * ```tsx\n * <Textfield label=\"Textfield label\">\n * ```\n */\nconst Textfield = forwardRef((props, ref) => {\n    const { label, description, suffix, prefix, style, characterLimit, hideLabel, type = 'text', htmlSize = 20, className, ...rest } = props;\n    const { inputProps, descriptionId, hasError, errorId, size = 'md', readOnly, } = useTextfield(props);\n    const [inputValue, setInputValue] = useState(props.value || props.defaultValue);\n    const characterLimitId = `textfield-charactercount-${useId()}`;\n    const hasCharacterLimit = characterLimit != null;\n    const describedBy = clsx(inputProps['aria-describedby'], hasCharacterLimit && characterLimitId) || undefined;\n    return (jsx(Paragraph, { asChild: true, size: size, children: jsxs(\"div\", { style: style, className: clsx(`fds-textfield`, `fds-textfield--${size}`, readOnly && `fds-textfield--readonly`, hasError && `fds-textfield--error`, className), children: [label && (jsxs(Label, { size: size, weight: 'medium', htmlFor: inputProps.id, className: clsx(`fds-textfield__label`, hideLabel && `fds-sr-only`), children: [readOnly && (jsx(PadlockLockedFillIcon, { \"aria-hidden\": true, className: 'fds-textfield__readonly__icon' })), jsx(\"span\", { children: label })] })), description && (jsx(Paragraph, { asChild: true, size: size, children: jsx(\"div\", { id: descriptionId, className: clsx(`fds-textfield__description`, hideLabel && `fds-sr-only`), children: description }) })), jsxs(\"div\", { className: 'fds-textfield__field', children: [prefix && (jsx(Paragraph, { asChild: true, size: size, variant: 'short', children: jsx(\"div\", { className: clsx(`fds-textfield__adornment`, `fds-textfield__prefix`), \"aria-hidden\": 'true', children: prefix }) })), jsx(\"input\", { className: clsx(`fds-textfield__input`, `fds-focus`, prefix && `fds-textfield__input--with-prefix`, suffix && `fds-textfield__input--with-suffix`), ref: ref, type: type, disabled: inputProps.disabled, \"aria-describedby\": describedBy, size: htmlSize, ...omit(['size', 'error', 'errorId'], rest), ...inputProps, onChange: (e) => {\n                                inputProps?.onChange?.(e);\n                                setInputValue(e.target.value);\n                            } }), suffix && (jsx(Paragraph, { asChild: true, size: size, variant: 'short', children: jsx(\"div\", { className: clsx(`fds-textfield__adornment`, `fds-textfield__suffix`), \"aria-hidden\": 'true', children: suffix }) }))] }), hasCharacterLimit && (jsx(CharacterCounter, { size: size, value: inputValue ? inputValue.toString() : '', id: characterLimitId, ...characterLimit })), jsx(\"div\", { className: 'fds-textfield__error-message', id: errorId, \"aria-live\": 'polite', \"aria-relevant\": 'additions removals', children: hasError && jsx(ErrorMessage, { size: size, children: props.error }) })] }) }));\n});\nTextfield.displayName = 'Textfield';\n\nexport { Textfield };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}