'use client';
import { jsx, jsxs } from 'react/jsx-runtime';
import { forwardRef, useContext } from 'react';
import { clsx } from '../../../node_modules/clsx/dist/lite.js';
import { PadlockLockedFillIcon } from '@navikt/aksel-icons';
import { useFieldset } from './useFieldset.js';
import { FieldsetContext } from './FieldsetContext.js';
import { Label } from '../../Typography/Label/Label.js';
import { Paragraph } from '../../Typography/Paragraph/Paragraph.js';
import { ErrorMessage } from '../../Typography/ErrorMessage/ErrorMessage.js';

const Fieldset = forwardRef((props, ref) => {
    const { children, legend, description, error, hideLegend, className, ...rest } = props;
    const { fieldsetProps, size, readOnly, errorId, hasError, descriptionId } = useFieldset(props);
    const fieldset = useContext(FieldsetContext);
    return (jsx(FieldsetContext.Provider, { value: {
            error: error ?? fieldset?.error,
            errorId: hasError ? errorId : undefined,
            size,
            disabled: props?.disabled,
            readOnly,
        }, children: jsxs("fieldset", { ...fieldsetProps, className: clsx('fds-fieldset', !hideLegend && 'fds-fieldset--spacing', readOnly && 'fds-fieldset--readonly', className), disabled: props?.disabled, ref: ref, ...rest, children: [jsx(Label, { asChild: true, size: size, children: jsx("legend", { className: 'fds-fieldset__legend', children: jsxs("span", { className: clsx('fds-fieldset__legend__content', hideLegend && `fds-sr-only`), children: [readOnly && (jsx(PadlockLockedFillIcon, { className: 'fds-fieldset__readonly__icon', "aria-hidden": true })), legend] }) }) }), description && (jsx(Paragraph, { size: size, variant: 'short', asChild: true, children: jsx("div", { id: descriptionId, className: clsx('fds-fieldset__description', hideLegend && `fds-sr-only`), children: description }) })), children, jsx("div", { id: errorId, "aria-live": 'polite', "aria-relevant": 'additions removals', className: 'fds-fieldset__error-message', children: hasError && jsx(ErrorMessage, { size: size, children: error }) })] }) }));
});
Fieldset.displayName = 'Fieldset';

export { Fieldset };
