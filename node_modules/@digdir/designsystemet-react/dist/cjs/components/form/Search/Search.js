'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var lite = require('../../../node_modules/clsx/dist/lite.js');
var akselIcons = require('@navikt/aksel-icons');
var floatingUi_react = require('../../../node_modules/@floating-ui/react/dist/floating-ui.react.js');
var useSearch = require('./useSearch.js');
var Button = require('../../Button/Button.js');
var Paragraph = require('../../Typography/Paragraph/Paragraph.js');
var Label = require('../../Typography/Label/Label.js');
var objectUtils = require('../../../utilities/objectUtils.js');
var ErrorMessage = require('../../Typography/ErrorMessage/ErrorMessage.js');

/** Search field
 *
 * @example
 * ```tsx
 * <Search label="Search" label">
 * ```
 */
const Search = React.forwardRef((props, ref) => {
    const { label, style, hideLabel = true, variant = 'simple', searchButtonLabel = 'Søk', clearButtonLabel = 'Tøm', defaultValue, value, onChange, onClear, disabled, onSearchClick, htmlSize = 27, className, ...rest } = props;
    const { inputProps, hasError, errorId, size = 'md' } = useSearch.useSearch(props);
    const inputRef = React.useRef();
    const mergedRef = floatingUi_react.useMergeRefs([ref, inputRef]);
    const [internalValue, setInternalValue] = React.useState(defaultValue ?? '');
    const handleChange = React.useCallback((e) => {
        const newValue = e.target.value;
        value === undefined && setInternalValue(newValue);
        onChange?.(e);
    }, [onChange, value]);
    const handleClear = () => {
        onClear?.(internalValue);
        setInternalValue('');
        inputRef?.current && inputRef.current.focus();
    };
    const handleSearchClick = () => {
        onSearchClick?.((value ?? internalValue).toString());
    };
    const isSimple = variant === 'simple';
    const showClearButton = Boolean(value ?? internalValue) && !disabled;
    return (jsxRuntime.jsx(Paragraph.Paragraph, { asChild: true, size: size, children: jsxRuntime.jsxs("div", { style: style, className: lite.clsx('fds-search', inputProps.disabled && 'fds-search--disabled', `fds-search--${size}`, className), children: [label && (jsxRuntime.jsx(Label.Label, { size: size, weight: 'medium', htmlFor: inputProps.id, className: lite.clsx('fds-search__label', hideLabel && 'fds-sr-only'), children: jsxRuntime.jsx("span", { children: label }) })), jsxRuntime.jsxs("div", { className: 'fds-search__field', children: [jsxRuntime.jsxs("div", { className: lite.clsx('fds-search__field', `fds-search--${size}`), children: [isSimple && (jsxRuntime.jsx(akselIcons.MagnifyingGlassIcon, { className: 'fds-search__icon', "aria-hidden": true })), jsxRuntime.jsx("input", { ref: mergedRef, size: htmlSize, value: value ?? internalValue, disabled: disabled, className: lite.clsx('fds-search__input', `fds-focus`, isSimple
                                        ? 'fds-search__input--simple'
                                        : 'fds-search__input--with-search-button'), ...objectUtils.omit(['size', 'error', 'errorId', 'readOnly'], rest), ...inputProps, onChange: handleChange }), showClearButton && (jsxRuntime.jsxs("button", { className: lite.clsx('fds-search__clear-button', `fds-focus`), type: 'button', onClick: handleClear, disabled: disabled, children: [jsxRuntime.jsx("span", { className: `fds-sr-only`, children: clearButtonLabel }), jsxRuntime.jsx(akselIcons.XMarkIcon, { "aria-hidden": true })] }))] }), !isSimple && (jsxRuntime.jsx(Button.Button, { className: 'fds-search__search-button', size: size, variant: variant, type: 'submit', onClick: handleSearchClick, disabled: disabled, children: searchButtonLabel }))] }), jsxRuntime.jsx("div", { className: 'fds-search__error-message', id: errorId, "aria-live": 'polite', "aria-relevant": 'additions removals', children: hasError && jsxRuntime.jsx(ErrorMessage.ErrorMessage, { size: size, children: props.error }) })] }) }));
});
Search.displayName = 'Search';

exports.Search = Search;
