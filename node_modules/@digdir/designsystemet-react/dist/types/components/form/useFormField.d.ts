import type { HTMLAttributes, InputHTMLAttributes, ReactNode } from 'react';
type OldFormFielSize = 'small' | 'medium' | 'large';
export type FormFieldProps = {
    /** Error message for form field */
    error?: ReactNode;
    /** Override generated errorId */
    errorId?: string;
    /** Disables element
     * @note Avoid using if possible for accessibility purposes
     */
    disabled?: boolean;
    /** Description for field */
    description?: ReactNode;
    /** Override internal id */
    id?: string;
    /** Toggle `readOnly` */
    readOnly?: boolean;
    /**
     * Changes field size and paddings
     * @default md
     * @note `small`, `medium`, `large` is deprecated
     */
    size?: 'sm' | 'md' | 'lg' | OldFormFielSize;
} & Pick<HTMLAttributes<HTMLElement>, 'aria-describedby'>;
export type FormField = {
    hasError: boolean;
    errorId: string;
    descriptionId: string;
    inputProps: {
        id: string;
    } & Pick<InputHTMLAttributes<HTMLInputElement>, 'disabled' | 'aria-invalid' | 'aria-describedby'>;
} & Pick<FormFieldProps, 'size' | 'readOnly'>;
/**
 * Handles props and their state for various form-fields in context with Fieldset
 */
export declare const useFormField: (props: FormFieldProps, prefix: string) => FormField;
export {};
//# sourceMappingURL=useFormField.d.ts.map