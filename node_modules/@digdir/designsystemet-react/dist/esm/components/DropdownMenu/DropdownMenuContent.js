'use client';
import { jsx, Fragment } from 'react/jsx-runtime';
import * as React from 'react';
import { forwardRef, useContext, useRef } from 'react';
import { useFloating, useInteractions, useFocus, useClick, useDismiss, useRole, useMergeRefs, FloatingFocusManager, FloatingPortal } from '../../node_modules/@floating-ui/react/dist/floating-ui.react.js';
import { clsx } from '../../node_modules/clsx/dist/lite.js';
import { DropdownMenuContext } from './DropdownMenu.js';
import { autoUpdate, shift } from '../../node_modules/@floating-ui/dom/dist/floating-ui.dom.js';
import { offset } from '../../node_modules/@floating-ui/core/dist/floating-ui.core.js';
import { useIsomorphicLayoutEffect } from '../../hooks/useIsomorphicLayoutEffect.js';

const GAP = 4;
const DropdownMenuContent = forwardRef(({ className, children, ...rest }, ref) => {
    const { size, placement, portal, anchorEl, isControlled, internalOpen, setInternalOpen, onClose, } = useContext(DropdownMenuContext);
    const Container = portal ? FloatingPortal : React.Fragment;
    const floatingEl = useRef(null);
    const { context, update, refs, placement: flPlacement, floatingStyles, } = useFloating({
        placement,
        open: internalOpen,
        onOpenChange: (localOpen) => {
            if (!localOpen)
                onClose && onClose();
            if (!isControlled)
                setInternalOpen(localOpen);
        },
        elements: {
            reference: anchorEl,
            floating: floatingEl.current,
        },
        whileElementsMounted: autoUpdate,
        middleware: [offset(GAP), shift()],
    });
    const { getFloatingProps } = useInteractions([
        useFocus(context),
        useClick(context),
        useDismiss(context),
        useRole(context),
    ]);
    useIsomorphicLayoutEffect(() => {
        refs.setReference(anchorEl);
        if (!refs.reference.current || !refs.floating.current || !internalOpen)
            return;
        const cleanup = autoUpdate(refs.reference.current, refs.floating.current, update);
        return () => cleanup();
    }, [refs.floating, refs.reference, update, anchorEl, refs, internalOpen]);
    const floatingRef = useMergeRefs([refs.setFloating, ref]);
    return (jsx(Fragment, { children: internalOpen && (jsx(FloatingFocusManager, { context: context, guards: false, modal: false, children: jsx(Container, { children: jsx("ul", { role: 'menu', "aria-hidden": !internalOpen, "data-placement": flPlacement, ref: floatingRef, style: floatingStyles, ...getFloatingProps({
                        ref: floatingRef,
                        tabIndex: undefined,
                    }), className: clsx('fds-dropdownmenu', `fds-dropdownmenu--${size}`, className), ...rest, children: children }) }) })) }));
});
DropdownMenuContent.displayName = 'DropdownMenuContent';

export { DropdownMenuContent };
