'use client';
import { useId, useContext, useMemo, useEffect } from 'react';
import { useMergeRefs } from '../../../../node_modules/@floating-ui/react/dist/floating-ui.react.js';
import { ComboboxContext } from '../ComboboxContext.js';
import useDebounce from '../../../../utilities/useDebounce.js';
import { useComboboxId, useComboboxIdDispatch } from '../ComboboxIdContext.js';
import { prefix } from '../useCombobox.js';

function useComboboxOption({ id, ref, value, }) {
    const generatedId = useId();
    const newId = id || generatedId;
    const context = useContext(ComboboxContext);
    const { activeIndex } = useComboboxId();
    const dispatch = useComboboxIdDispatch();
    if (!context) {
        throw new Error('ComboboxOption must be used within a Combobox');
    }
    const { selectedOptions, onOptionClick, listRef, customIds, filteredOptions, } = context;
    const index = useMemo(() => filteredOptions.indexOf(prefix(String(value))) + customIds.length, [customIds.length, filteredOptions, value]);
    const combinedRef = useMergeRefs([
        (node) => {
            listRef.current[index] = node;
        },
        ref,
    ]);
    if (index === -1) {
        throw new Error('Internal error: ComboboxOption did not find index');
    }
    const selected = selectedOptions[prefix(value)];
    const active = activeIndex === index;
    useEffect(() => {
        if (active) {
            dispatch?.({ type: 'SET_ACTIVE_INDEX', payload: index });
        }
    }, [generatedId, id, dispatch, active, index]);
    const onOptionClickDebounced = useDebounce(() => onOptionClick(value), 50);
    return {
        id: newId,
        ref: combinedRef,
        selected,
        active,
        onOptionClick: onOptionClickDebounced,
    };
}

export { useComboboxOption as default };
