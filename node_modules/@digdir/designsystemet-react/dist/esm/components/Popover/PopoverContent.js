'use client';
import { jsx, Fragment, jsxs } from 'react/jsx-runtime';
import * as React from 'react';
import { forwardRef, useContext, useRef, useEffect, useMemo } from 'react';
import { useFloating, useInteractions, useFocus, useClick, useDismiss, useRole, useMergeRefs, FloatingPortal } from '../../node_modules/@floating-ui/react/dist/floating-ui.react.js';
import { clsx } from '../../node_modules/clsx/dist/lite.js';
import { PopoverContext } from './Popover.js';
import { autoUpdate, flip, shift } from '../../node_modules/@floating-ui/dom/dist/floating-ui.dom.js';
import { offset } from '../../node_modules/@floating-ui/core/dist/floating-ui.core.js';
import { arrow } from '../../node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.js';
import { useIsomorphicLayoutEffect } from '../../hooks/useIsomorphicLayoutEffect.js';
import { Paragraph } from '../Typography/Paragraph/Paragraph.js';

const ARROW_HEIGHT = 7;
const ARROW_GAP = 4;
const ARROW_PLACEMENT = {
    top: 'bottom',
    right: 'left',
    bottom: 'top',
    left: 'right',
};
const PopoverContent = forwardRef(({ className, children, style, id, ...rest }, ref) => {
    const { portal, internalOpen, size, isControlled, variant, placement, setInternalOpen, onClose, onOpenChange, anchorEl, popoverId, setPopoverId, triggerId, } = useContext(PopoverContext);
    const Container = portal ? FloatingPortal : React.Fragment;
    const floatingEl = useRef(null);
    const arrowRef = useRef(null);
    useEffect(() => {
        id && setPopoverId?.(id);
    }, [id, setPopoverId]);
    const { context, update, refs, floatingStyles, placement: flPlacement, middlewareData: { arrow: { x: arrowX, y: arrowY } = {} }, } = useFloating({
        placement,
        open: internalOpen,
        onOpenChange: (localOpen) => {
            onOpenChange && onOpenChange(localOpen);
            if (!localOpen)
                onClose && onClose();
            if (!isControlled)
                setInternalOpen(localOpen);
        },
        whileElementsMounted: autoUpdate,
        elements: {
            reference: anchorEl ?? undefined,
            floating: floatingEl.current,
        },
        middleware: [
            offset(ARROW_HEIGHT + ARROW_GAP),
            flip({
                fallbackAxisSideDirection: 'start',
            }),
            shift(),
            arrow({
                element: arrowRef,
            }),
        ],
    });
    const { getFloatingProps } = useInteractions([
        useFocus(context),
        useClick(context),
        useDismiss(context),
        useRole(context),
    ]);
    const floatingRef = useMergeRefs([refs.setFloating, ref]);
    useIsomorphicLayoutEffect(() => {
        refs.setReference(anchorEl);
        if (!refs.reference.current || !refs.floating.current || !internalOpen)
            return;
        const cleanup = autoUpdate(refs.reference.current, refs.floating.current, update);
        return () => cleanup();
    }, [refs.floating, refs.reference, update, anchorEl, refs, internalOpen]);
    const arrowPlacement = useMemo(() => {
        return ARROW_PLACEMENT[flPlacement.split('-')[0]];
    }, [flPlacement]);
    return (jsx(Fragment, { children: internalOpen && (jsx(Container, { children: jsx(Paragraph, { asChild: true, size: size, children: jsxs("div", { ref: floatingEl, className: clsx('fds-popover', `fds-popover--${variant}`, `fds-popover--${size}`, className), "data-placement": flPlacement, ...getFloatingProps({
                        ref: floatingRef,
                        tabIndex: undefined,
                    }), style: { ...floatingStyles, ...style }, id: popoverId, "aria-labelledby": triggerId, ...rest, children: [children, jsx("div", { ref: arrowRef, className: clsx('fds-popover__arrow', `fds-popover__arrow--${arrowPlacement}`), style: {
                                height: ARROW_HEIGHT,
                                width: ARROW_HEIGHT,
                                ...(arrowX != null ? { left: arrowX } : {}),
                                ...(arrowY != null ? { top: arrowY } : {}),
                                ...(arrowPlacement ? { [arrowPlacement]: -4.5 } : {}),
                            } })] }) }) })) }));
});
PopoverContent.displayName = 'Popover.Content';

export { PopoverContent };
