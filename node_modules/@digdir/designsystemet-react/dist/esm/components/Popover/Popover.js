'use client';
import { jsx } from 'react/jsx-runtime';
import * as React from 'react';
import { useRef, useState, useId } from 'react';
import { getSize } from '../../utilities/getSize.js';

const Popover = ({ children, placement = 'top', open, variant = 'default', portal, onOpenChange, onClose, ...rest }) => {
    const size = getSize(rest.size || 'md');
    const triggerRef = useRef(null);
    const [internalOpen, setInternalOpen] = useState(open ?? false);
    const randomPopoverId = useId();
    const [popoverId, setPopoverId] = useState(randomPopoverId);
    const randomTriggerId = useId();
    const [triggerId, setTriggerId] = useState(randomTriggerId);
    const isControlled = typeof open === 'boolean';
    React.useEffect(() => {
        setInternalOpen(open ?? false);
    }, [open]);
    const anchorEl = triggerRef.current;
    return (jsx(PopoverContext.Provider, { value: {
            triggerRef,
            anchorEl,
            portal,
            internalOpen,
            isControlled,
            setInternalOpen,
            size,
            variant,
            placement,
            onOpenChange,
            onClose,
            popoverId,
            setPopoverId,
            triggerId,
            setTriggerId,
        }, children: children }));
};
const PopoverContext = React.createContext({
    size: 'sm',
    variant: 'default',
    anchorEl: null,
    placement: 'top',
    triggerRef: { current: null },
    internalOpen: false,
    setInternalOpen: () => { },
});
Popover.displayName = 'Popover';

export { Popover, PopoverContext };
