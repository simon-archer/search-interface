'use client';
import { jsx, jsxs } from 'react/jsx-runtime';
import { forwardRef } from 'react';
import { clsx } from '../../../node_modules/clsx/dist/lite.js';
import { PadlockLockedFillIcon } from '@navikt/aksel-icons';
import { useNativeSelect } from './useNativeSelect.js';
import { Label } from '../../Typography/Label/Label.js';
import { omit } from '../../../utilities/objectUtils.js';
import { ErrorMessage } from '../../Typography/ErrorMessage/ErrorMessage.js';
import { Paragraph } from '../../Typography/Paragraph/Paragraph.js';

const NativeSelect = forwardRef((props, ref) => {
    const { children, disabled = false, label, description, hideLabel = false, error, className, htmlSize = 0, ...rest } = props;
    const { selectProps, descriptionId, errorId, readOnly = false, size = 'md', } = useNativeSelect(props);
    return (jsx(Paragraph, { asChild: true, size: size, children: jsxs("div", { className: clsx('fds-native-select--container', readOnly && 'fds-native-select--readonly', error && 'fds-native-select--error'), children: [label && (jsxs(Label, { weight: 'medium', size: size, htmlFor: selectProps.id, className: clsx('fds-native-select__label', hideLabel && 'fds-sr-only'), children: [readOnly && (jsx(PadlockLockedFillIcon, { "aria-hidden": true, className: 'fds-native-select__readonly__icon' })), label] })), description && (jsx(Paragraph, { asChild: true, size: size, children: jsx("div", { id: descriptionId, className: clsx(`fds-native-select__description`, hideLabel && `fds-sr-only`), children: description }) })), jsx("select", { disabled: disabled || readOnly, ref: ref, size: htmlSize, className: clsx('fds-native-select', `fds-native-select--${size}`, `fds-focus`, props.multiple && 'fds-native-select--multiple', className), ...omit(['size', 'error', 'errorId'], rest), ...omit(['readOnly', 'disabled'], selectProps), children: children }), error && (jsx("div", { id: errorId, className: 'fds-native-select__error-message', "aria-live": 'polite', "aria-relevant": 'additions removals', children: jsx(ErrorMessage, { size: size, children: error }) }))] }) }));
});
NativeSelect.displayName = 'NativeSelect';

export { NativeSelect };
