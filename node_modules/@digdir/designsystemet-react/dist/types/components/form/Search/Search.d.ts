import type { ReactNode, InputHTMLAttributes } from 'react';
import type { FormFieldProps } from '../useFormField';
type OldSearchSizes = 'small' | 'medium' | 'large';
export type SearchProps = {
    /** Label */
    label?: ReactNode;
    /** Visually hides `label` and `description` (still available for screen readers)
     * @default true
     */
    hideLabel?: boolean;
    /**
     * Changes field size and paddings
     * @default md
     * @note `small`, `medium`, `large` is deprecated
     */
    size?: 'sm' | 'md' | 'lg' | OldSearchSizes;
    /** Variant
     * @default 'simple'
     */
    variant?: 'primary' | 'secondary' | 'simple';
    /** Callback for when clear button is activated */
    onClear?: (value: InputHTMLAttributes<HTMLInputElement>['value']) => void;
    /**Callback for Search-button submit */
    onSearchClick?: (value: string) => void;
    /** Search button label. Use this for providing a descriptive button text and/or icon
     * @default 'Søk'
     */
    searchButtonLabel?: ReactNode;
    /** Clear button label. Hidden visually. Used for screen readers
     * @default 'Tøm'
     */
    clearButtonLabel?: string;
    /** Exposes the HTML `size` attribute.
     * @default 27
     */
    htmlSize?: number;
} & Omit<FormFieldProps, 'size' | 'description' | 'readOnly'> & Omit<InputHTMLAttributes<HTMLInputElement>, 'size' | 'readOnly'>;
/** Search field
 *
 * @example
 * ```tsx
 * <Search label="Search" label">
 * ```
 */
export declare const Search: import("react").ForwardRefExoticComponent<{
    /** Label */
    label?: ReactNode;
    /** Visually hides `label` and `description` (still available for screen readers)
     * @default true
     */
    hideLabel?: boolean | undefined;
    /**
     * Changes field size and paddings
     * @default md
     * @note `small`, `medium`, `large` is deprecated
     */
    size?: "sm" | "md" | "lg" | OldSearchSizes | undefined;
    /** Variant
     * @default 'simple'
     */
    variant?: "primary" | "secondary" | "simple" | undefined;
    /** Callback for when clear button is activated */
    onClear?: ((value: InputHTMLAttributes<HTMLInputElement>['value']) => void) | undefined;
    /**Callback for Search-button submit */
    onSearchClick?: ((value: string) => void) | undefined;
    /** Search button label. Use this for providing a descriptive button text and/or icon
     * @default 'Søk'
     */
    searchButtonLabel?: ReactNode;
    /** Clear button label. Hidden visually. Used for screen readers
     * @default 'Tøm'
     */
    clearButtonLabel?: string | undefined;
    /** Exposes the HTML `size` attribute.
     * @default 27
     */
    htmlSize?: number | undefined;
} & Omit<FormFieldProps, "size" | "description" | "readOnly"> & Omit<InputHTMLAttributes<HTMLInputElement>, "size" | "readOnly"> & import("react").RefAttributes<HTMLInputElement>>;
export {};
//# sourceMappingURL=Search.d.ts.map