import type { DialogHTMLAttributes } from 'react';
export type ModalDialogProps = {
    /**
     * Close modal when clicking on backdrop.
     * @default undefined
     */
    onInteractOutside?: () => void;
    /**
     * Callback that is called when the modal is closed.
     * @default undefined
     */
    onClose?: () => void;
    /**
     * Called before the modal is closed when using the close button, `closeOnBackdropClick` or `ESCAPE`.
     * If the function returns `false` the modal will not close.
     */
    onBeforeClose?: () => boolean | void;
    asChild?: boolean;
} & DialogHTMLAttributes<HTMLDialogElement>;
export declare const ModalDialog: import("react").ForwardRefExoticComponent<{
    /**
     * Close modal when clicking on backdrop.
     * @default undefined
     */
    onInteractOutside?: (() => void) | undefined;
    /**
     * Callback that is called when the modal is closed.
     * @default undefined
     */
    onClose?: (() => void) | undefined;
    /**
     * Called before the modal is closed when using the close button, `closeOnBackdropClick` or `ESCAPE`.
     * If the function returns `false` the modal will not close.
     */
    onBeforeClose?: (() => boolean | void) | undefined;
    asChild?: boolean | undefined;
} & DialogHTMLAttributes<HTMLDialogElement> & import("react").RefAttributes<HTMLDialogElement>>;
//# sourceMappingURL=ModalDialog.d.ts.map