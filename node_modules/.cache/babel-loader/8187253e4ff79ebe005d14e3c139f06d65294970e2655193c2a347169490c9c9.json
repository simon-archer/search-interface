{"ast":null,"code":"var _jsxFileName = \"/Users/simondreyer/CascadeProjects/search-interface/src/components/SearchInterface.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Search } from '@digdir/designsystemet-react';\nimport { Paragraph } from '@digdir/designsystemet-react';\nimport { Heading } from '@digdir/designsystemet-react';\nimport SearchResults from './SearchResults';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchInterface = () => {\n  _s();\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState([]);\n  const [isSearching, setIsSearching] = useState(false);\n  const handleSearch = async searchQuery => {\n    setIsSearching(true);\n    // Simulate search across multiple sources\n    // In a real implementation, this would call your backend API\n    setTimeout(() => {\n      const mockResults = [{\n        title: 'FAQ: Getting Started',\n        summary: 'Guide on how to begin with our services and common setup procedures.',\n        source: 'FAQ',\n        url: '#'\n      }, {\n        title: 'Slack Discussion: Best Practices',\n        summary: 'Team discussion about implementation patterns and recommended approaches.',\n        source: 'Slack',\n        url: '#'\n      }, {\n        title: 'GitHub Issue: Performance Optimization',\n        summary: 'Technical discussion about improving application performance.',\n        source: 'GitHub',\n        url: '#'\n      }];\n      setResults(mockResults);\n      setIsSearching(false);\n    }, 1000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: '800px',\n      margin: '0 auto',\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      level: 1,\n      size: \"xlarge\",\n      spacing: true,\n      children: \"Knowledge Base Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paragraph, {\n      spacing: true,\n      children: \"Search across FAQs, Slack discussions, and GitHub repositories to find the information you need.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      label: \"Search knowledge base\",\n      hideLabel: false,\n      value: query,\n      onChange: e => setQuery(e.target.value),\n      onSearchClick: () => handleSearch(query),\n      size: \"medium\",\n      variant: \"primary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchResults, {\n      results: results,\n      isLoading: isSearching\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchInterface, \"5WW7yQnw8uUxcrFFHtg0ucXWXx4=\");\n_c = SearchInterface;\nexport default SearchInterface;\nvar _c;\n$RefreshReg$(_c, \"SearchInterface\");","map":{"version":3,"names":["React","useState","Search","Paragraph","Heading","SearchResults","jsxDEV","_jsxDEV","SearchInterface","_s","query","setQuery","results","setResults","isSearching","setIsSearching","handleSearch","searchQuery","setTimeout","mockResults","title","summary","source","url","style","maxWidth","margin","padding","children","level","size","spacing","fileName","_jsxFileName","lineNumber","columnNumber","label","hideLabel","value","onChange","e","target","onSearchClick","variant","isLoading","_c","$RefreshReg$"],"sources":["/Users/simondreyer/CascadeProjects/search-interface/src/components/SearchInterface.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Search } from '@digdir/designsystemet-react';\nimport { Paragraph } from '@digdir/designsystemet-react';\nimport { Heading } from '@digdir/designsystemet-react';\nimport SearchResults from './SearchResults';\n\ninterface SearchResult {\n  title: string;\n  summary: string;\n  source: string;\n  url: string;\n}\n\nconst SearchInterface: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState<SearchResult[]>([]);\n  const [isSearching, setIsSearching] = useState(false);\n\n  const handleSearch = async (searchQuery: string) => {\n    setIsSearching(true);\n    // Simulate search across multiple sources\n    // In a real implementation, this would call your backend API\n    setTimeout(() => {\n      const mockResults: SearchResult[] = [\n        {\n          title: 'FAQ: Getting Started',\n          summary: 'Guide on how to begin with our services and common setup procedures.',\n          source: 'FAQ',\n          url: '#'\n        },\n        {\n          title: 'Slack Discussion: Best Practices',\n          summary: 'Team discussion about implementation patterns and recommended approaches.',\n          source: 'Slack',\n          url: '#'\n        },\n        {\n          title: 'GitHub Issue: Performance Optimization',\n          summary: 'Technical discussion about improving application performance.',\n          source: 'GitHub',\n          url: '#'\n        }\n      ];\n      setResults(mockResults);\n      setIsSearching(false);\n    }, 1000);\n  };\n\n  return (\n    <div style={{ maxWidth: '800px', margin: '0 auto', padding: '20px' }}>\n      <Heading level={1} size=\"xlarge\" spacing>\n        Knowledge Base Search\n      </Heading>\n      <Paragraph spacing>\n        Search across FAQs, Slack discussions, and GitHub repositories to find the information you need.\n      </Paragraph>\n      \n      <Search\n        label=\"Search knowledge base\"\n        hideLabel={false}\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n        onSearchClick={() => handleSearch(query)}\n        size=\"medium\"\n        variant=\"primary\"\n      />\n\n      <SearchResults \n        results={results} \n        isLoading={isSearching}\n      />\n    </div>\n  );\n};\n\nexport default SearchInterface;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,QAAQ,8BAA8B;AACrD,SAASC,SAAS,QAAQ,8BAA8B;AACxD,SAASC,OAAO,QAAQ,8BAA8B;AACtD,OAAOC,aAAa,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS5C,MAAMC,eAAyB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAiB,EAAE,CAAC;EAC1D,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAErD,MAAMe,YAAY,GAAG,MAAOC,WAAmB,IAAK;IAClDF,cAAc,CAAC,IAAI,CAAC;IACpB;IACA;IACAG,UAAU,CAAC,MAAM;MACf,MAAMC,WAA2B,GAAG,CAClC;QACEC,KAAK,EAAE,sBAAsB;QAC7BC,OAAO,EAAE,sEAAsE;QAC/EC,MAAM,EAAE,KAAK;QACbC,GAAG,EAAE;MACP,CAAC,EACD;QACEH,KAAK,EAAE,kCAAkC;QACzCC,OAAO,EAAE,2EAA2E;QACpFC,MAAM,EAAE,OAAO;QACfC,GAAG,EAAE;MACP,CAAC,EACD;QACEH,KAAK,EAAE,wCAAwC;QAC/CC,OAAO,EAAE,+DAA+D;QACxEC,MAAM,EAAE,QAAQ;QAChBC,GAAG,EAAE;MACP,CAAC,CACF;MACDV,UAAU,CAACM,WAAW,CAAC;MACvBJ,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,oBACER,OAAA;IAAKiB,KAAK,EAAE;MAAEC,QAAQ,EAAE,OAAO;MAAEC,MAAM,EAAE,QAAQ;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,gBACnErB,OAAA,CAACH,OAAO;MAACyB,KAAK,EAAE,CAAE;MAACC,IAAI,EAAC,QAAQ;MAACC,OAAO;MAAAH,QAAA,EAAC;IAEzC;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,eACV5B,OAAA,CAACJ,SAAS;MAAC4B,OAAO;MAAAH,QAAA,EAAC;IAEnB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAW,CAAC,eAEZ5B,OAAA,CAACL,MAAM;MACLkC,KAAK,EAAC,uBAAuB;MAC7BC,SAAS,EAAE,KAAM;MACjBC,KAAK,EAAE5B,KAAM;MACb6B,QAAQ,EAAGC,CAAC,IAAK7B,QAAQ,CAAC6B,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC1CI,aAAa,EAAEA,CAAA,KAAM1B,YAAY,CAACN,KAAK,CAAE;MACzCoB,IAAI,EAAC,QAAQ;MACba,OAAO,EAAC;IAAS;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CAAC,eAEF5B,OAAA,CAACF,aAAa;MACZO,OAAO,EAAEA,OAAQ;MACjBgC,SAAS,EAAE9B;IAAY;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC1B,EAAA,CA5DID,eAAyB;AAAAqC,EAAA,GAAzBrC,eAAyB;AA8D/B,eAAeA,eAAe;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}