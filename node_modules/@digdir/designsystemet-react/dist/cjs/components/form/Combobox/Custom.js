'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var lite = require('../../../node_modules/clsx/dist/lite.js');
var index = require('../../../node_modules/@radix-ui/react-slot/dist/index.js');
var floatingUi_react = require('../../../node_modules/@floating-ui/react/dist/floating-ui.react.js');
var ComboboxContext = require('./ComboboxContext.js');
var ComboboxIdContext = require('./ComboboxIdContext.js');
var objectUtils = require('../../../utilities/objectUtils.js');

const ComboboxCustom = React.forwardRef(({ asChild, interactive, id, className, ...rest }, ref) => {
    if (interactive && !id) {
        throw new Error('If ComboboxCustom is interactive, it must have an id');
    }
    const Component = asChild ? index.Slot : 'div';
    const randomId = React.useId();
    const { activeIndex } = ComboboxIdContext.useComboboxId();
    const context = React.useContext(ComboboxContext.ComboboxContext);
    if (!context) {
        throw new Error('ComboboxCustom must be used within a Combobox');
    }
    const { customIds, listRef, getItemProps } = context;
    const index$1 = React.useMemo(() => (id && customIds.indexOf(id)) || 0, [id, customIds]);
    const combinedRef = floatingUi_react.useMergeRefs([
        (node) => {
            listRef.current[index$1] = node;
        },
        ref,
    ]);
    return (jsxRuntime.jsx(Component, { ref: combinedRef, tabIndex: -1, className: lite.clsx('fds-combobox__custom', className), id: id || randomId, role: 'option', "aria-selected": activeIndex === index$1, "data-active": activeIndex === index$1, ...objectUtils.omit(['interactive'], rest), ...objectUtils.omit(['onClick', 'onPointerLeave'], getItemProps()) }));
});
var ComboboxCustom$1 = ComboboxCustom;

exports.ComboboxCustom = ComboboxCustom;
exports.default = ComboboxCustom$1;
