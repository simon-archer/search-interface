'use client';
import { jsx } from 'react/jsx-runtime';
import { createContext, forwardRef, useState } from 'react';
import { clsx } from '../../node_modules/clsx/dist/lite.js';
import { getSize } from '../../utilities/getSize.js';

const TabsContext = createContext({});
const Tabs = forwardRef(({ children, value, defaultValue, className, onChange, ...rest }, ref) => {
    const size = getSize(rest.size || 'md');
    const isControlled = value !== undefined;
    const [uncontrolledValue, setUncontrolledValue] = useState(defaultValue);
    let onValueChange = onChange;
    if (!isControlled) {
        onValueChange = (newValue) => {
            setUncontrolledValue(newValue);
            onChange?.(newValue);
        };
        value = uncontrolledValue;
    }
    return (jsx(TabsContext.Provider, { value: {
            value,
            defaultValue,
            onChange: onValueChange,
        }, children: jsx("div", { className: clsx(`fds-tabs--${size}`, className), ref: ref, ...rest, children: children }) }));
});
Tabs.displayName = 'Tabs';

export { Tabs, TabsContext };
