import type { ButtonHTMLAttributes } from 'react';
type OldButtonSizes = 'small' | 'medium' | 'large';
export type ButtonProps = {
    /** Specify which variant to use */
    variant?: 'primary' | 'secondary' | 'tertiary';
    /** Specify which color palette to use */
    color?: 'first' | 'second' | 'success' | 'danger';
    /**
     * Size
     * @default `md`
     * @note `small`, `medium`, `large` is deprecated
     */
    size?: 'sm' | 'md' | 'lg' | OldButtonSizes;
    /** If `Button` should fill full width of its container */
    fullWidth?: boolean;
    /** Toggle icon only styling, pass icon as children
     * @default false
     */
    icon?: boolean;
    /**
     * Change the default rendered element for the one passed as a child, merging their props and behavior.
     * @default false
     */
    asChild?: boolean;
} & ButtonHTMLAttributes<HTMLButtonElement>;
/**
 * Button used for interaction
 */
export declare const Button: import("react").ForwardRefExoticComponent<{
    /** Specify which variant to use */
    variant?: "primary" | "secondary" | "tertiary" | undefined;
    /** Specify which color palette to use */
    color?: "first" | "second" | "success" | "danger" | undefined;
    /**
     * Size
     * @default `md`
     * @note `small`, `medium`, `large` is deprecated
     */
    size?: "sm" | "md" | "lg" | OldButtonSizes | undefined;
    /** If `Button` should fill full width of its container */
    fullWidth?: boolean | undefined;
    /** Toggle icon only styling, pass icon as children
     * @default false
     */
    icon?: boolean | undefined;
    /**
     * Change the default rendered element for the one passed as a child, merging their props and behavior.
     * @default false
     */
    asChild?: boolean | undefined;
} & ButtonHTMLAttributes<HTMLButtonElement> & import("react").RefAttributes<HTMLButtonElement>>;
export {};
//# sourceMappingURL=Button.d.ts.map