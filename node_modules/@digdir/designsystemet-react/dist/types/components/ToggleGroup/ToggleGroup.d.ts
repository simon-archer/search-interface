import type { HTMLAttributes } from 'react';
import type { ButtonProps } from '../Button';
export type ToggleGroupContextProps = {
    value?: string;
    defaultValue?: string;
    onChange?: (value: string) => void;
    name?: string;
    size?: ButtonProps['size'];
};
export declare const ToggleGroupContext: import("react").Context<ToggleGroupContextProps>;
export type ToggleGroupProps = {
    /** Controlled state for `ToggleGroup` component. */
    value?: string;
    /** Default value. */
    defaultValue?: string;
    /** Callback with selected `ToggleGroupItem` `value` */
    onChange?: (value: string) => void;
    /** Form element name */
    name?: string;
    /**
     * Changes items size and paddings
     * @default md
     * @note `small`, `medium`, `large` is deprecated
     */
    size?: ToggleGroupContextProps['size'];
} & Omit<HTMLAttributes<HTMLDivElement>, 'value' | 'onChange'>;
/** `ToggleGroup` component.
 * @example
 * ```tsx
 * <ToggleGroup onChange={(value) => console.log(value)}>
 *   <ToggleGroup.Item value='1'>Toggle 1</ToggleGroup.Item>
 *   <ToggleGroup.Item value='2'>Toggle 2</ToggleGroup.Item>
 *   <ToggleGroup.Item value='3'>Toggle 3</ToggleGroup.Item>
 * </ToggleGroup>
 * ```
 */
export declare const ToggleGroup: import("react").ForwardRefExoticComponent<{
    /** Controlled state for `ToggleGroup` component. */
    value?: string | undefined;
    /** Default value. */
    defaultValue?: string | undefined;
    /** Callback with selected `ToggleGroupItem` `value` */
    onChange?: ((value: string) => void) | undefined;
    /** Form element name */
    name?: string | undefined;
    /**
     * Changes items size and paddings
     * @default md
     * @note `small`, `medium`, `large` is deprecated
     */
    size?: ToggleGroupContextProps['size'];
} & Omit<HTMLAttributes<HTMLDivElement>, "value" | "onChange"> & import("react").RefAttributes<HTMLDivElement>>;
//# sourceMappingURL=ToggleGroup.d.ts.map