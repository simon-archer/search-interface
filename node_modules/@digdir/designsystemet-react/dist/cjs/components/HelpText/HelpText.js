'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var lite = require('../../node_modules/clsx/dist/lite.js');
var index = require('../Popover/index.js');
var getSize = require('../../utilities/getSize.js');
var HelpTextIcon = require('./HelpTextIcon.js');

const HelpText = ({ title, placement = 'right', portal, className, children, ...rest }) => {
    const size = getSize.getSize(rest.size || 'md');
    const [open, setOpen] = React.useState(false);
    return (jsxRuntime.jsx(jsxRuntime.Fragment, { children: jsxRuntime.jsxs(index.Popover, { variant: 'info', placement: placement, size: size, portal: portal, open: open, onClose: () => setOpen(false), children: [jsxRuntime.jsx(index.Popover.Trigger, { asChild: true, variant: 'tertiary', children: jsxRuntime.jsxs("button", { className: lite.clsx(`fds-helptext--${size}`, 'fds-helptext__button', `fds-focus`, className), "aria-expanded": open, onClick: () => setOpen(!open), ...rest, children: [jsxRuntime.jsx(HelpTextIcon.HelpTextIcon, { filled: true, className: lite.clsx(`fds-helptext__icon`, `fds-helptext__icon--filled`, className), openState: open }), jsxRuntime.jsx(HelpTextIcon.HelpTextIcon, { className: lite.clsx(`fds-helptext__icon`, className), openState: open }), jsxRuntime.jsx("span", { className: `fds-sr-only`, children: title })] }) }), jsxRuntime.jsx(index.Popover.Content, { className: 'fds-helptext__content', children: children })] }) }));
};
HelpText.displayName = 'HelpText';

exports.HelpText = HelpText;
