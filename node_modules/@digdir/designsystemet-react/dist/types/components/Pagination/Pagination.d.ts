import type * as React from 'react';
type OldPaginationSizes = 'small' | 'medium' | 'large';
export type PaginationProps = {
    /** Sets the text label for the next page button */
    nextLabel: string;
    /** Sets the text label for the previous page button */
    previousLabel: string;
    /** Sets the size of the component
     * @default md
     * @note `small`, `medium`, `large` is deprecated
     */
    size?: 'sm' | 'md' | 'lg' | OldPaginationSizes;
    /** Sets how compact the component will be. If true, only 5 steps will show. */
    compact?: boolean;
    /** Hides the component's previous and next button labels */
    hideLabels?: boolean;
    /** Sets the current page
     * @default 1
     */
    currentPage: number;
    /** Total number of pages */
    totalPages: number;
    /** Function to be called when the selected page changes. */
    onChange: (currentPage: number) => void;
    /** `aria-label` for pagination item */
    itemLabel?: (currentPage: number) => string;
} & Omit<React.HTMLAttributes<HTMLElement>, 'onChange'>;
export declare const Pagination: React.ForwardRefExoticComponent<{
    /** Sets the text label for the next page button */
    nextLabel: string;
    /** Sets the text label for the previous page button */
    previousLabel: string;
    /** Sets the size of the component
     * @default md
     * @note `small`, `medium`, `large` is deprecated
     */
    size?: "sm" | "md" | "lg" | OldPaginationSizes | undefined;
    /** Sets how compact the component will be. If true, only 5 steps will show. */
    compact?: boolean | undefined;
    /** Hides the component's previous and next button labels */
    hideLabels?: boolean | undefined;
    /** Sets the current page
     * @default 1
     */
    currentPage: number;
    /** Total number of pages */
    totalPages: number;
    /** Function to be called when the selected page changes. */
    onChange: (currentPage: number) => void;
    /** `aria-label` for pagination item */
    itemLabel?: ((currentPage: number) => string) | undefined;
} & Omit<React.HTMLAttributes<HTMLElement>, "onChange"> & React.RefAttributes<HTMLElement>>;
export {};
//# sourceMappingURL=Pagination.d.ts.map