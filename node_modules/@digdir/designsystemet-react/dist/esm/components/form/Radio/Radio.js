'use client';
import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { forwardRef } from 'react';
import { clsx } from '../../../node_modules/clsx/dist/lite.js';
import { useRadio } from './useRadio.js';
import { Paragraph } from '../../Typography/Paragraph/Paragraph.js';
import { omit } from '../../../utilities/objectUtils.js';
import { Label } from '../../Typography/Label/Label.js';

const Radio = forwardRef((props, ref) => {
    const { children, description, className, style, ...rest } = props;
    const { inputProps, descriptionId, hasError, size = 'md', readOnly, } = useRadio(props);
    return (jsx(Paragraph, { asChild: true, size: size, children: jsxs("div", { className: clsx('fds-radio', `fds-radio--${size}`, hasError && `fds-radio--error`, readOnly && `fds-radio--readonly`, className), style: style, children: [jsx("input", { className: 'fds-radio__input', disabled: inputProps.disabled, ref: ref, ...omit(['size', 'error'], rest), ...inputProps }), children && (jsxs(Fragment, { children: [jsx(Label, { className: 'fds-radio__label', htmlFor: inputProps.id, size: size, weight: 'regular', children: jsx("span", { children: children }) }), description && (jsx(Paragraph, { asChild: true, size: size, children: jsx("div", { id: descriptionId, className: 'fds-radio__description', children: description }) }))] }))] }) }));
});
Radio.displayName = 'Radio';

export { Radio };
