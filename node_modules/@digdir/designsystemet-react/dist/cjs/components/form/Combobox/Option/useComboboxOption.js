'use client';
'use strict';

var React = require('react');
var floatingUi_react = require('../../../../node_modules/@floating-ui/react/dist/floating-ui.react.js');
var ComboboxContext = require('../ComboboxContext.js');
var useDebounce = require('../../../../utilities/useDebounce.js');
var ComboboxIdContext = require('../ComboboxIdContext.js');
var useCombobox = require('../useCombobox.js');

function useComboboxOption({ id, ref, value, }) {
    const generatedId = React.useId();
    const newId = id || generatedId;
    const context = React.useContext(ComboboxContext.ComboboxContext);
    const { activeIndex } = ComboboxIdContext.useComboboxId();
    const dispatch = ComboboxIdContext.useComboboxIdDispatch();
    if (!context) {
        throw new Error('ComboboxOption must be used within a Combobox');
    }
    const { selectedOptions, onOptionClick, listRef, customIds, filteredOptions, } = context;
    const index = React.useMemo(() => filteredOptions.indexOf(useCombobox.prefix(String(value))) + customIds.length, [customIds.length, filteredOptions, value]);
    const combinedRef = floatingUi_react.useMergeRefs([
        (node) => {
            listRef.current[index] = node;
        },
        ref,
    ]);
    if (index === -1) {
        throw new Error('Internal error: ComboboxOption did not find index');
    }
    const selected = selectedOptions[useCombobox.prefix(value)];
    const active = activeIndex === index;
    React.useEffect(() => {
        if (active) {
            dispatch?.({ type: 'SET_ACTIVE_INDEX', payload: index });
        }
    }, [generatedId, id, dispatch, active, index]);
    const onOptionClickDebounced = useDebounce(() => onOptionClick(value), 50);
    return {
        id: newId,
        ref: combinedRef,
        selected,
        active,
        onOptionClick: onOptionClickDebounced,
    };
}

module.exports = useComboboxOption;
