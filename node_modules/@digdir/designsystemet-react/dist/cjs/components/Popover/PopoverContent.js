'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var floatingUi_react = require('../../node_modules/@floating-ui/react/dist/floating-ui.react.js');
var lite = require('../../node_modules/clsx/dist/lite.js');
var Popover = require('./Popover.js');
var floatingUi_dom = require('../../node_modules/@floating-ui/dom/dist/floating-ui.dom.js');
var floatingUi_core = require('../../node_modules/@floating-ui/core/dist/floating-ui.core.js');
var floatingUi_reactDom = require('../../node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.js');
var useIsomorphicLayoutEffect = require('../../hooks/useIsomorphicLayoutEffect.js');
var Paragraph = require('../Typography/Paragraph/Paragraph.js');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

const ARROW_HEIGHT = 7;
const ARROW_GAP = 4;
const ARROW_PLACEMENT = {
    top: 'bottom',
    right: 'left',
    bottom: 'top',
    left: 'right',
};
const PopoverContent = React.forwardRef(({ className, children, style, id, ...rest }, ref) => {
    const { portal, internalOpen, size, isControlled, variant, placement, setInternalOpen, onClose, onOpenChange, anchorEl, popoverId, setPopoverId, triggerId, } = React.useContext(Popover.PopoverContext);
    const Container = portal ? floatingUi_react.FloatingPortal : React__namespace.Fragment;
    const floatingEl = React.useRef(null);
    const arrowRef = React.useRef(null);
    React.useEffect(() => {
        id && setPopoverId?.(id);
    }, [id, setPopoverId]);
    const { context, update, refs, floatingStyles, placement: flPlacement, middlewareData: { arrow: { x: arrowX, y: arrowY } = {} }, } = floatingUi_react.useFloating({
        placement,
        open: internalOpen,
        onOpenChange: (localOpen) => {
            onOpenChange && onOpenChange(localOpen);
            if (!localOpen)
                onClose && onClose();
            if (!isControlled)
                setInternalOpen(localOpen);
        },
        whileElementsMounted: floatingUi_dom.autoUpdate,
        elements: {
            reference: anchorEl ?? undefined,
            floating: floatingEl.current,
        },
        middleware: [
            floatingUi_core.offset(ARROW_HEIGHT + ARROW_GAP),
            floatingUi_dom.flip({
                fallbackAxisSideDirection: 'start',
            }),
            floatingUi_dom.shift(),
            floatingUi_reactDom.arrow({
                element: arrowRef,
            }),
        ],
    });
    const { getFloatingProps } = floatingUi_react.useInteractions([
        floatingUi_react.useFocus(context),
        floatingUi_react.useClick(context),
        floatingUi_react.useDismiss(context),
        floatingUi_react.useRole(context),
    ]);
    const floatingRef = floatingUi_react.useMergeRefs([refs.setFloating, ref]);
    useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        refs.setReference(anchorEl);
        if (!refs.reference.current || !refs.floating.current || !internalOpen)
            return;
        const cleanup = floatingUi_dom.autoUpdate(refs.reference.current, refs.floating.current, update);
        return () => cleanup();
    }, [refs.floating, refs.reference, update, anchorEl, refs, internalOpen]);
    const arrowPlacement = React.useMemo(() => {
        return ARROW_PLACEMENT[flPlacement.split('-')[0]];
    }, [flPlacement]);
    return (jsxRuntime.jsx(jsxRuntime.Fragment, { children: internalOpen && (jsxRuntime.jsx(Container, { children: jsxRuntime.jsx(Paragraph.Paragraph, { asChild: true, size: size, children: jsxRuntime.jsxs("div", { ref: floatingEl, className: lite.clsx('fds-popover', `fds-popover--${variant}`, `fds-popover--${size}`, className), "data-placement": flPlacement, ...getFloatingProps({
                        ref: floatingRef,
                        tabIndex: undefined,
                    }), style: { ...floatingStyles, ...style }, id: popoverId, "aria-labelledby": triggerId, ...rest, children: [children, jsxRuntime.jsx("div", { ref: arrowRef, className: lite.clsx('fds-popover__arrow', `fds-popover__arrow--${arrowPlacement}`), style: {
                                height: ARROW_HEIGHT,
                                width: ARROW_HEIGHT,
                                ...(arrowX != null ? { left: arrowX } : {}),
                                ...(arrowY != null ? { top: arrowY } : {}),
                                ...(arrowPlacement ? { [arrowPlacement]: -4.5 } : {}),
                            } })] }) }) })) }));
});
PopoverContent.displayName = 'Popover.Content';

exports.PopoverContent = PopoverContent;
