'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var lite = require('../../../../node_modules/clsx/dist/lite.js');
var akselIcons = require('@navikt/aksel-icons');
var Label = require('../../../Typography/Label/Label.js');
var Paragraph = require('../../../Typography/Paragraph/Paragraph.js');

const ComboboxLabel = ({ label, description, hideLabel, size, readOnly, formFieldProps, }) => {
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [label && (jsxRuntime.jsxs(Label.Label, { size: size, htmlFor: formFieldProps.inputProps.id, className: lite.clsx('fds-combobox__label', hideLabel && `fds-sr-only`), children: [readOnly && (jsxRuntime.jsx(akselIcons.PadlockLockedFillIcon, { "aria-hidden": true, className: 'fds-combobox__readonly__icon' })), label] })), description && (jsxRuntime.jsx(Paragraph.Paragraph, { asChild: true, size: size, children: jsxRuntime.jsx("div", { id: formFieldProps.descriptionId, className: lite.clsx('fds-combobox__description', hideLabel && `fds-sr-only`), children: description }) }))] }));
};
ComboboxLabel.displayName = 'ComboboxLabel';
var ComboboxLabel$1 = ComboboxLabel;

exports.ComboboxLabel = ComboboxLabel;
exports.default = ComboboxLabel$1;
