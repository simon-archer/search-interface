'use client';
import { jsx, Fragment } from 'react/jsx-runtime';
import { useContext } from 'react';
import '../../../Chip/index.js';
import { ComboboxContext } from '../ComboboxContext.js';
import { RemovableChip } from '../../../Chip/Removable/Removable.js';

const ComboboxChips = () => {
    const context = useContext(ComboboxContext);
    if (!context) {
        throw new Error('ComboboxContext is missing');
    }
    const { size, readOnly, disabled, selectedOptions, chipSrLabel, handleSelectOption, inputRef, } = context;
    return (jsx(Fragment, { children: Object.keys(selectedOptions).map((value) => {
            return (jsx(RemovableChip, { size: size, disabled: disabled, onKeyDown: (e) => {
                    if (readOnly)
                        return;
                    if (disabled)
                        return;
                    if (e.key === 'Enter') {
                        e.stopPropagation();
                        handleSelectOption({
                            option: selectedOptions[value],
                            remove: true,
                        });
                        inputRef.current?.focus();
                    }
                }, onClick: () => {
                    if (readOnly)
                        return;
                    if (disabled)
                        return;
                    /* If we click a chip, filter the active values and remove the one we clicked */
                    handleSelectOption({
                        option: selectedOptions[value],
                        remove: true,
                    });
                }, "aria-label": chipSrLabel(selectedOptions[value]), children: selectedOptions[value].label }, value));
        }) }));
};
ComboboxChips.displayName = 'ComboboxChips';
var ComboboxChips$1 = ComboboxChips;

export { ComboboxChips, ComboboxChips$1 as default };
