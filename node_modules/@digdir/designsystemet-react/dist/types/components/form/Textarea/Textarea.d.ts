import type { ReactNode, TextareaHTMLAttributes } from 'react';
import type { FormFieldProps } from '../useFormField';
import type { CharacterLimitProps } from '../CharacterCounter';
export type TextareaProps = {
    /** Label */
    label?: ReactNode;
    /** Visually hides `label` and `description` (still available for screen readers)  */
    hideLabel?: boolean;
    /**
     *  The characterLimit function calculates remaining characters based on `maxCount`
     *
     *  Provide a `label` function that takes count as parameter and returns a message.
     *
     *  Use `srLabel` to describe `maxCount` for screen readers.
     *
     *  Defaults to Norwegian if no labels are provided.
     */
    characterLimit?: CharacterLimitProps;
} & FormFieldProps & TextareaHTMLAttributes<HTMLTextAreaElement>;
/** Textarea field
 *
 * @example
 * ```tsx
 * <Textarea label="Textarea label">
 * ```
 */
export declare const Textarea: import("react").ForwardRefExoticComponent<{
    /** Label */
    label?: ReactNode;
    /** Visually hides `label` and `description` (still available for screen readers)  */
    hideLabel?: boolean | undefined;
    /**
     *  The characterLimit function calculates remaining characters based on `maxCount`
     *
     *  Provide a `label` function that takes count as parameter and returns a message.
     *
     *  Use `srLabel` to describe `maxCount` for screen readers.
     *
     *  Defaults to Norwegian if no labels are provided.
     */
    characterLimit?: CharacterLimitProps | undefined;
} & {
    error?: ReactNode;
    errorId?: string | undefined;
    disabled?: boolean | undefined;
    description?: ReactNode;
    id?: string | undefined;
    readOnly?: boolean | undefined;
    size?: "sm" | "md" | "lg" | ("small" | "medium" | "large") | undefined;
} & Pick<import("react").HTMLAttributes<HTMLElement>, "aria-describedby"> & TextareaHTMLAttributes<HTMLTextAreaElement> & import("react").RefAttributes<HTMLTextAreaElement>>;
//# sourceMappingURL=Textarea.d.ts.map