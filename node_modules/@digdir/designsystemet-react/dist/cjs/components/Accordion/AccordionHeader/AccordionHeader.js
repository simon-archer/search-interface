'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var akselIcons = require('@navikt/aksel-icons');
var lite = require('../../../node_modules/clsx/dist/lite.js');
var React = require('react');
var AccordionItem = require('../AccordionItem/AccordionItem.js');
var Heading = require('../../Typography/Heading/Heading.js');
var Paragraph = require('../../Typography/Paragraph/Paragraph.js');

const AccordionHeader = React.forwardRef(({ level = 1, children, className, onHeaderClick, ...rest }, ref) => {
    const context = React.useContext(AccordionItem.AccordionItemContext);
    if (context === null) {
        console.error('<Accordion.Header> has to be used within an <Accordion.Item>');
        return null;
    }
    const handleClick = (e) => {
        context.toggleOpen();
        onHeaderClick && onHeaderClick(e);
    };
    return (jsxRuntime.jsx(Heading.Heading, { ref: ref, size: 'xs', level: level, className: lite.clsx('fds-accordion__header', className), ...rest, children: jsxRuntime.jsxs("button", { type: 'button', className: lite.clsx('fds-accordion__button', `fds-focus`), onClick: handleClick, "aria-expanded": context.open, "aria-controls": context.contentId, children: [jsxRuntime.jsx(akselIcons.ChevronDownIcon, { "aria-hidden": true, className: 'fds-accordion__expand-icon', fontSize: '1.5rem' }), jsxRuntime.jsx(Paragraph.Paragraph, { asChild: true, size: 'sm', children: jsxRuntime.jsx("span", { children: children }) })] }) }));
});
AccordionHeader.displayName = 'AccordionHeader';

exports.AccordionHeader = AccordionHeader;
