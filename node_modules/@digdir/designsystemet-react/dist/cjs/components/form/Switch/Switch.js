'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var lite = require('../../../node_modules/clsx/dist/lite.js');
var akselIcons = require('@navikt/aksel-icons');
var useSwitch = require('./useSwitch.js');
var Paragraph = require('../../Typography/Paragraph/Paragraph.js');
var objectUtils = require('../../../utilities/objectUtils.js');
var Label = require('../../Typography/Label/Label.js');

const Switch = React.forwardRef((props, ref) => {
    const { children, description, position = 'left', className, ...rest } = props;
    const { inputProps, descriptionId, size = 'md', readOnly, } = useSwitch.useSwitch(props);
    return (jsxRuntime.jsx(Paragraph.Paragraph, { asChild: true, size: size, children: jsxRuntime.jsxs("div", { className: lite.clsx(`fds-switch`, `fds-switch--${size}`, inputProps.disabled && `fds-switch--disabled`, readOnly && `fds-switch--readonly`, className), children: [jsxRuntime.jsx("input", { className: `fds-switch__input`, disabled: inputProps.disabled, ref: ref, ...objectUtils.omit(['size', 'error'], rest), ...inputProps }), jsxRuntime.jsxs(Label.Label, { className: lite.clsx(`fds-switch__label`, position === 'right' && `fds-switch__label--right`), htmlFor: inputProps.id, size: size, weight: 'regular', children: [jsxRuntime.jsx("span", { className: `fds-switch__track`, children: jsxRuntime.jsx("span", { className: `fds-switch__thumb` }) }), readOnly && (jsxRuntime.jsx(akselIcons.PadlockLockedFillIcon, { "aria-hidden": true, className: `fds-switch__readonly__icon` })), children && jsxRuntime.jsx("span", { children: children })] }), description && (jsxRuntime.jsx(Paragraph.Paragraph, { asChild: true, size: size, children: jsxRuntime.jsx("div", { id: descriptionId, className: `fds-switch__description`, children: description }) }))] }) }));
});
Switch.displayName = 'Switch';

exports.Switch = Switch;
