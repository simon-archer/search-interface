'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var lite = require('../../../node_modules/clsx/dist/lite.js');
var floatingUi_react = require('../../../node_modules/@floating-ui/react/dist/floating-ui.react.js');
var useCheckbox = require('./useCheckbox.js');
var Paragraph = require('../../Typography/Paragraph/Paragraph.js');
var objectUtils = require('../../../utilities/objectUtils.js');
var Label = require('../../Typography/Label/Label.js');

const Checkbox = React.forwardRef((props, ref) => {
    const { children, description, className, style, ...rest } = props;
    const { inputProps, descriptionId, hasError, size = 'md', readOnly, } = useCheckbox.useCheckbox(props);
    const inputRef = floatingUi_react.useMergeRefs([
        ref,
        (el) => {
            if (el) {
                el.indeterminate = rest.indeterminate ?? false;
            }
        },
    ]);
    return (jsxRuntime.jsx(Paragraph.Paragraph, { asChild: true, size: size, children: jsxRuntime.jsxs("div", { className: lite.clsx('fds-checkbox', `fds-checkbox--${size}`, hasError && `fds-checkbox--error`, readOnly && `fds-checkbox--readonly`, className), style: style, children: [jsxRuntime.jsx("input", { className: `fds-checkbox__input`, ref: inputRef, ...objectUtils.omit(['size', 'error', 'indeterminate'], rest), ...inputProps, type: 'checkbox', disabled: inputProps.disabled, "aria-checked": rest.indeterminate ? 'mixed' : inputProps.checked }), children && (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(Label.Label, { className: `fds-checkbox__label`, htmlFor: inputProps.id, size: size, weight: 'regular', children: jsxRuntime.jsx("span", { children: children }) }), description && (jsxRuntime.jsx(Paragraph.Paragraph, { asChild: true, size: size, children: jsxRuntime.jsx("div", { id: descriptionId, className: `fds-checkbox__description`, children: description }) }))] }))] }) }));
});
Checkbox.displayName = 'Checkbox';

exports.Checkbox = Checkbox;
