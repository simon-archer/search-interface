import type { Placement } from '@floating-ui/react';
import * as React from 'react';
import type { PortalProps } from '../../types/Portal';
type OldPopoverSizes = 'small' | 'medium' | 'large';
export type PopoverProps = {
    /**
     * Placement of the tooltip on the trigger.
     * @default top
     */
    placement?: Placement;
    /**
     * Variant of the popover.
     * @default default
     */
    variant?: 'default' | 'info' | 'warning' | 'danger';
    /**
     * Use this to make the popover controlled.
     * @default undefined
     */
    open?: boolean;
    /**
     * Size of the popover
     * @default md
     * @note `small`, `medium`, `large` is deprecated
     */
    size?: 'sm' | 'md' | 'lg' | OldPopoverSizes;
    /** Callback function when popover changes open state */
    onOpenChange?: (open: boolean) => void;
    /**
     * Callback when the popover wants to close.
     */
    onClose?: () => void;
    children: React.ReactNode;
} & PortalProps;
export declare const Popover: {
    ({ children, placement, open, variant, portal, onOpenChange, onClose, ...rest }: PopoverProps): import("react/jsx-runtime").JSX.Element;
    displayName: string;
};
export declare const PopoverContext: React.Context<{
    triggerRef: React.RefObject<Element>;
    anchorEl: Element | null;
    portal?: boolean | undefined;
    popoverId?: string | undefined;
    triggerId?: string | undefined;
    isControlled?: boolean | undefined;
    internalOpen: boolean;
    size: NonNullable<PopoverProps['size']>;
    variant: NonNullable<PopoverProps['variant']>;
    placement: Placement;
    onOpenChange?: PopoverProps['onOpenChange'];
    onClose?: PopoverProps['onClose'];
    setPopoverId?: ((id: string) => void) | undefined;
    setTriggerId?: ((id: string) => void) | undefined;
    setInternalOpen: (open: boolean) => void;
}>;
export {};
//# sourceMappingURL=Popover.d.ts.map