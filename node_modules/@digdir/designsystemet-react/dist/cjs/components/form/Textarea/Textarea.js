'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var lite = require('../../../node_modules/clsx/dist/lite.js');
var akselIcons = require('@navikt/aksel-icons');
var CharacterCounter = require('../CharacterCounter.js');
var useTextarea = require('./useTextarea.js');
var Paragraph = require('../../Typography/Paragraph/Paragraph.js');
var Label = require('../../Typography/Label/Label.js');
var objectUtils = require('../../../utilities/objectUtils.js');
var ErrorMessage = require('../../Typography/ErrorMessage/ErrorMessage.js');

/** Textarea field
 *
 * @example
 * ```tsx
 * <Textarea label="Textarea label">
 * ```
 */
const Textarea = React.forwardRef((props, ref) => {
    const { label, description, style, characterLimit, hideLabel, className, ...rest } = props;
    const { textareaProps, descriptionId, hasError, errorId, size = 'md', readOnly, } = useTextarea.useTextarea(props);
    const [value, setValue] = React.useState(props.defaultValue);
    const characterLimitId = `${textareaProps.id}-charactercount}`;
    const hasCharacterLimit = characterLimit != null;
    const describedBy = lite.clsx(textareaProps['aria-describedby'], hasCharacterLimit && characterLimitId) || undefined;
    return (jsxRuntime.jsx(Paragraph.Paragraph, { asChild: true, size: size, children: jsxRuntime.jsxs("div", { style: style, className: lite.clsx('fds-textarea', `fds-textarea--${size}`, hasError && `fds-textarea--error`, className), children: [label && (jsxRuntime.jsxs(Label.Label, { size: size, weight: 'medium', htmlFor: textareaProps.id, className: lite.clsx('fds-textarea__label', hideLabel && `fds-sr-only`), children: [readOnly && (jsxRuntime.jsx(akselIcons.PadlockLockedFillIcon, { "aria-hidden": true, className: 'fds-textarea__readonly-icon' })), jsxRuntime.jsx("span", { children: label })] })), description && (jsxRuntime.jsx(Paragraph.Paragraph, { asChild: true, size: size, children: jsxRuntime.jsx("div", { id: descriptionId, className: lite.clsx('fds-textarea__description', hideLabel && `fds-sr-only`), children: description }) })), jsxRuntime.jsx("textarea", { className: lite.clsx('fds-textarea__input', `fds-focus`), ref: ref, "aria-describedby": describedBy, disabled: textareaProps.disabled, readOnly: readOnly, ...objectUtils.omit(['size', 'error', 'errorId'], rest), ...textareaProps, onChange: (e) => {
                        textareaProps?.onChange?.(e);
                        setValue(e.target.value);
                    } }), hasCharacterLimit && (jsxRuntime.jsx(CharacterCounter.CharacterCounter, { size: size, value: value ? value.toString() : '', id: characterLimitId, ...characterLimit })), jsxRuntime.jsx("div", { className: 'fds-textarea__error-message', id: errorId, "aria-live": 'polite', "aria-relevant": 'additions removals', children: hasError && jsxRuntime.jsx(ErrorMessage.ErrorMessage, { size: size, children: props.error }) })] }) }));
});
Textarea.displayName = 'Textarea';

exports.Textarea = Textarea;
