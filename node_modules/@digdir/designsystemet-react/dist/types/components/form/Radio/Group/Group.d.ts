import type { ReactNode } from 'react';
import type { FieldsetProps } from '../../Fieldset';
export type RadioGroupContextProps = {
    name?: string;
    value?: string;
    defaultValue?: string;
    required?: boolean;
    onChange?: (value: string) => void;
};
export declare const RadioGroupContext: import("react").Context<RadioGroupContextProps | null>;
export type RadioGroupProps = {
    /** Collection of `Radio` components */
    children?: ReactNode;
    /** Controlled state for `Radio` */
    value?: string;
    /** Default checked `Radio` */
    defaultValue?: string;
    /** Callback event with checked `Radio` value */
    onChange?: (value: string) => void;
    /** Toggle if collection of `Radio` are required  */
    required?: boolean;
    /** Orientation of `Radio` components.
     * @note Only use `horizontal` for when you have two options and short labels
     */
    inline?: boolean;
} & Omit<FieldsetProps, 'onChange'>;
export declare const RadioGroup: import("react").ForwardRefExoticComponent<{
    /** Collection of `Radio` components */
    children?: ReactNode;
    /** Controlled state for `Radio` */
    value?: string | undefined;
    /** Default checked `Radio` */
    defaultValue?: string | undefined;
    /** Callback event with checked `Radio` value */
    onChange?: ((value: string) => void) | undefined;
    /** Toggle if collection of `Radio` are required  */
    required?: boolean | undefined;
    /** Orientation of `Radio` components.
     * @note Only use `horizontal` for when you have two options and short labels
     */
    inline?: boolean | undefined;
} & Omit<FieldsetProps, "onChange"> & import("react").RefAttributes<HTMLFieldSetElement>>;
//# sourceMappingURL=Group.d.ts.map