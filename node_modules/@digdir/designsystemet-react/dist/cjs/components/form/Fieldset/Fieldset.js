'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var lite = require('../../../node_modules/clsx/dist/lite.js');
var akselIcons = require('@navikt/aksel-icons');
var useFieldset = require('./useFieldset.js');
var FieldsetContext = require('./FieldsetContext.js');
var Label = require('../../Typography/Label/Label.js');
var Paragraph = require('../../Typography/Paragraph/Paragraph.js');
var ErrorMessage = require('../../Typography/ErrorMessage/ErrorMessage.js');

const Fieldset = React.forwardRef((props, ref) => {
    const { children, legend, description, error, hideLegend, className, ...rest } = props;
    const { fieldsetProps, size, readOnly, errorId, hasError, descriptionId } = useFieldset.useFieldset(props);
    const fieldset = React.useContext(FieldsetContext.FieldsetContext);
    return (jsxRuntime.jsx(FieldsetContext.FieldsetContext.Provider, { value: {
            error: error ?? fieldset?.error,
            errorId: hasError ? errorId : undefined,
            size,
            disabled: props?.disabled,
            readOnly,
        }, children: jsxRuntime.jsxs("fieldset", { ...fieldsetProps, className: lite.clsx('fds-fieldset', !hideLegend && 'fds-fieldset--spacing', readOnly && 'fds-fieldset--readonly', className), disabled: props?.disabled, ref: ref, ...rest, children: [jsxRuntime.jsx(Label.Label, { asChild: true, size: size, children: jsxRuntime.jsx("legend", { className: 'fds-fieldset__legend', children: jsxRuntime.jsxs("span", { className: lite.clsx('fds-fieldset__legend__content', hideLegend && `fds-sr-only`), children: [readOnly && (jsxRuntime.jsx(akselIcons.PadlockLockedFillIcon, { className: 'fds-fieldset__readonly__icon', "aria-hidden": true })), legend] }) }) }), description && (jsxRuntime.jsx(Paragraph.Paragraph, { size: size, variant: 'short', asChild: true, children: jsxRuntime.jsx("div", { id: descriptionId, className: lite.clsx('fds-fieldset__description', hideLegend && `fds-sr-only`), children: description }) })), children, jsxRuntime.jsx("div", { id: errorId, "aria-live": 'polite', "aria-relevant": 'additions removals', className: 'fds-fieldset__error-message', children: hasError && jsxRuntime.jsx(ErrorMessage.ErrorMessage, { size: size, children: error }) })] }) }));
});
Fieldset.displayName = 'Fieldset';

exports.Fieldset = Fieldset;
