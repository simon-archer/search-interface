'use client';
import { jsx, jsxs } from 'react/jsx-runtime';
import { forwardRef, useState } from 'react';
import { clsx } from '../../../node_modules/clsx/dist/lite.js';
import { PadlockLockedFillIcon } from '@navikt/aksel-icons';
import { CharacterCounter } from '../CharacterCounter.js';
import { useTextarea } from './useTextarea.js';
import { Paragraph } from '../../Typography/Paragraph/Paragraph.js';
import { Label } from '../../Typography/Label/Label.js';
import { omit } from '../../../utilities/objectUtils.js';
import { ErrorMessage } from '../../Typography/ErrorMessage/ErrorMessage.js';

/** Textarea field
 *
 * @example
 * ```tsx
 * <Textarea label="Textarea label">
 * ```
 */
const Textarea = forwardRef((props, ref) => {
    const { label, description, style, characterLimit, hideLabel, className, ...rest } = props;
    const { textareaProps, descriptionId, hasError, errorId, size = 'md', readOnly, } = useTextarea(props);
    const [value, setValue] = useState(props.defaultValue);
    const characterLimitId = `${textareaProps.id}-charactercount}`;
    const hasCharacterLimit = characterLimit != null;
    const describedBy = clsx(textareaProps['aria-describedby'], hasCharacterLimit && characterLimitId) || undefined;
    return (jsx(Paragraph, { asChild: true, size: size, children: jsxs("div", { style: style, className: clsx('fds-textarea', `fds-textarea--${size}`, hasError && `fds-textarea--error`, className), children: [label && (jsxs(Label, { size: size, weight: 'medium', htmlFor: textareaProps.id, className: clsx('fds-textarea__label', hideLabel && `fds-sr-only`), children: [readOnly && (jsx(PadlockLockedFillIcon, { "aria-hidden": true, className: 'fds-textarea__readonly-icon' })), jsx("span", { children: label })] })), description && (jsx(Paragraph, { asChild: true, size: size, children: jsx("div", { id: descriptionId, className: clsx('fds-textarea__description', hideLabel && `fds-sr-only`), children: description }) })), jsx("textarea", { className: clsx('fds-textarea__input', `fds-focus`), ref: ref, "aria-describedby": describedBy, disabled: textareaProps.disabled, readOnly: readOnly, ...omit(['size', 'error', 'errorId'], rest), ...textareaProps, onChange: (e) => {
                        textareaProps?.onChange?.(e);
                        setValue(e.target.value);
                    } }), hasCharacterLimit && (jsx(CharacterCounter, { size: size, value: value ? value.toString() : '', id: characterLimitId, ...characterLimit })), jsx("div", { className: 'fds-textarea__error-message', id: errorId, "aria-live": 'polite', "aria-relevant": 'additions removals', children: hasError && jsx(ErrorMessage, { size: size, children: props.error }) })] }) }));
});
Textarea.displayName = 'Textarea';

export { Textarea };
