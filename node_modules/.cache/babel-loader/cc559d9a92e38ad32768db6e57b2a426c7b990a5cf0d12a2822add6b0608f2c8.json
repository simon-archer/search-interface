{"ast":null,"code":"'use client';\n\nimport { useMemo, Children, useState, isValidElement } from 'react';\nimport { ComboboxOption } from './Option/Option.js';\nimport ComboboxCustom from './Custom.js';\nconst isOption = option => !!option;\nfunction isComboboxOption(child) {\n  return isValidElement(child) && child.type === ComboboxOption;\n}\nfunction isComboboxCustom(child) {\n  return isValidElement(child) && child.type === ComboboxCustom;\n}\nfunction isInteractiveComboboxCustom(child) {\n  return isComboboxCustom(child) && child.props.interactive === true;\n}\nconst INTERNAL_OPTION_PREFIX = 'internal-option-';\n/**\n * We use this function to prefix the value of the options so we can make sure numbers as strings are not parsed as numbers in objects\n * @param value\n * @returns\n */\nconst prefix = value => {\n  return INTERNAL_OPTION_PREFIX + value;\n};\nconst removePrefix = value => {\n  return value.slice(INTERNAL_OPTION_PREFIX.length);\n};\nfunction useCombobox(_ref) {\n  let {\n    children,\n    inputValue,\n    multiple,\n    filter = (inputValue, option) => {\n      return option.label.toLowerCase().startsWith(inputValue.toLowerCase());\n    },\n    initialValue\n  } = _ref;\n  const {\n    optionsChildren,\n    customIds,\n    restChildren,\n    interactiveChildren\n  } = useMemo(() => {\n    const allChildren = Children.toArray(children);\n    const result = allChildren.reduce((acc, child) => {\n      if (isComboboxOption(child)) {\n        acc.optionsChildren.push(child);\n      } else {\n        acc.restChildren.push(child);\n        if (isInteractiveComboboxCustom(child)) {\n          const childElement = child;\n          acc.interactiveChildren.push(childElement);\n          if (!childElement.props.id) {\n            throw new Error('If ComboboxCustom is interactive, it must have an id');\n          }\n          acc.customIds.push(childElement.props.id);\n        }\n      }\n      return acc;\n    }, {\n      optionsChildren: [],\n      customIds: [],\n      restChildren: [],\n      interactiveChildren: []\n    });\n    return result;\n  }, [children]);\n  const options = useMemo(() => {\n    const allOptions = {};\n    optionsChildren.map(child => {\n      const props = child.props;\n      let label = props.displayValue || '';\n      if (!props.displayValue) {\n        let childrenLabel = '';\n        // go over children and find all strings\n        Children.forEach(props.children, child => {\n          if (typeof child === 'string') {\n            childrenLabel += child;\n          } else {\n            throw new Error('If ComboboxOption is not a string, it must have a displayValue prop');\n          }\n        });\n        label = childrenLabel;\n      }\n      allOptions[prefix(String(props.value))] = {\n        value: String(props.value),\n        label,\n        displayValue: props.displayValue,\n        description: props.description\n      };\n    });\n    return allOptions;\n  }, [optionsChildren]);\n  const preSelectedOptions = useMemo(() => (initialValue?.map(key => {\n    return prefix(key);\n  }) || []).reduce((acc, value) => {\n    const option = options[value];\n    if (isOption(option)) {\n      acc[value] = option;\n    }\n    return acc;\n  }, {}), [initialValue, options]);\n  const [selectedOptions, setSelectedOptions] = useState(preSelectedOptions);\n  const {\n    filteredOptions,\n    filteredOptionsChildren\n  } = useMemo(() => {\n    const filteredOptions = [];\n    const filteredOptionsChildren = Object.keys(options).map((option, index) => {\n      /* If we have a selected value in single mode and the input matches an option, return all children */\n      if (!multiple && Object.keys(selectedOptions).length === 1) {\n        filteredOptions.push(option);\n        return optionsChildren[index];\n      }\n      if (multiple && selectedOptions[option]) {\n        filteredOptions.push(option);\n        return optionsChildren[index];\n      }\n      if (filter(inputValue, options[option])) {\n        filteredOptions.push(option);\n        return optionsChildren[index];\n      }\n    });\n    return {\n      filteredOptions,\n      filteredOptionsChildren\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [inputValue, multiple, options, optionsChildren, selectedOptions]);\n  return {\n    filteredOptionsChildren,\n    filteredOptions,\n    restChildren,\n    options,\n    customIds,\n    selectedOptions,\n    interactiveChildren,\n    setSelectedOptions\n  };\n}\nexport { useCombobox as default, isComboboxCustom, isComboboxOption, isInteractiveComboboxCustom, prefix, removePrefix };","map":{"version":3,"names":["useMemo","Children","useState","isValidElement","ComboboxOption","ComboboxCustom","isOption","option","isComboboxOption","child","type","isComboboxCustom","isInteractiveComboboxCustom","props","interactive","INTERNAL_OPTION_PREFIX","prefix","value","removePrefix","slice","length","useCombobox","_ref","children","inputValue","multiple","filter","label","toLowerCase","startsWith","initialValue","optionsChildren","customIds","restChildren","interactiveChildren","allChildren","toArray","result","reduce","acc","push","childElement","id","Error","options","allOptions","map","displayValue","childrenLabel","forEach","String","description","preSelectedOptions","key","selectedOptions","setSelectedOptions","filteredOptions","filteredOptionsChildren","Object","keys","index","default"],"sources":["/Users/simondreyer/CascadeProjects/search-interface/node_modules/@digdir/designsystemet-react/dist/esm/components/form/Combobox/useCombobox.js"],"sourcesContent":["'use client';\nimport { useMemo, Children, useState, isValidElement } from 'react';\nimport { ComboboxOption } from './Option/Option.js';\nimport ComboboxCustom from './Custom.js';\n\nconst isOption = (option) => !!option;\nfunction isComboboxOption(child) {\n    return isValidElement(child) && child.type === ComboboxOption;\n}\nfunction isComboboxCustom(child) {\n    return isValidElement(child) && child.type === ComboboxCustom;\n}\nfunction isInteractiveComboboxCustom(child) {\n    return isComboboxCustom(child) && child.props.interactive === true;\n}\nconst INTERNAL_OPTION_PREFIX = 'internal-option-';\n/**\n * We use this function to prefix the value of the options so we can make sure numbers as strings are not parsed as numbers in objects\n * @param value\n * @returns\n */\nconst prefix = (value) => {\n    return INTERNAL_OPTION_PREFIX + value;\n};\nconst removePrefix = (value) => {\n    return value.slice(INTERNAL_OPTION_PREFIX.length);\n};\nfunction useCombobox({ children, inputValue, multiple, filter = (inputValue, option) => {\n    return option.label.toLowerCase().startsWith(inputValue.toLowerCase());\n}, initialValue, }) {\n    const { optionsChildren, customIds, restChildren, interactiveChildren } = useMemo(() => {\n        const allChildren = Children.toArray(children);\n        const result = allChildren.reduce((acc, child) => {\n            if (isComboboxOption(child)) {\n                acc.optionsChildren.push(child);\n            }\n            else {\n                acc.restChildren.push(child);\n                if (isInteractiveComboboxCustom(child)) {\n                    const childElement = child;\n                    acc.interactiveChildren.push(childElement);\n                    if (!childElement.props.id) {\n                        throw new Error('If ComboboxCustom is interactive, it must have an id');\n                    }\n                    acc.customIds.push(childElement.props.id);\n                }\n            }\n            return acc;\n        }, {\n            optionsChildren: [],\n            customIds: [],\n            restChildren: [],\n            interactiveChildren: [],\n        });\n        return result;\n    }, [children]);\n    const options = useMemo(() => {\n        const allOptions = {};\n        optionsChildren.map((child) => {\n            const props = child.props;\n            let label = props.displayValue || '';\n            if (!props.displayValue) {\n                let childrenLabel = '';\n                // go over children and find all strings\n                Children.forEach(props.children, (child) => {\n                    if (typeof child === 'string') {\n                        childrenLabel += child;\n                    }\n                    else {\n                        throw new Error('If ComboboxOption is not a string, it must have a displayValue prop');\n                    }\n                });\n                label = childrenLabel;\n            }\n            allOptions[prefix(String(props.value))] = {\n                value: String(props.value),\n                label,\n                displayValue: props.displayValue,\n                description: props.description,\n            };\n        });\n        return allOptions;\n    }, [optionsChildren]);\n    const preSelectedOptions = useMemo(() => (initialValue?.map((key) => {\n        return prefix(key);\n    }) || []).reduce((acc, value) => {\n        const option = options[value];\n        if (isOption(option)) {\n            acc[value] = option;\n        }\n        return acc;\n    }, {}), [initialValue, options]);\n    const [selectedOptions, setSelectedOptions] = useState(preSelectedOptions);\n    const { filteredOptions, filteredOptionsChildren } = useMemo(() => {\n        const filteredOptions = [];\n        const filteredOptionsChildren = Object.keys(options).map((option, index) => {\n            /* If we have a selected value in single mode and the input matches an option, return all children */\n            if (!multiple && Object.keys(selectedOptions).length === 1) {\n                filteredOptions.push(option);\n                return optionsChildren[index];\n            }\n            if (multiple && selectedOptions[option]) {\n                filteredOptions.push(option);\n                return optionsChildren[index];\n            }\n            if (filter(inputValue, options[option])) {\n                filteredOptions.push(option);\n                return optionsChildren[index];\n            }\n        });\n        return { filteredOptions, filteredOptionsChildren };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [inputValue, multiple, options, optionsChildren, selectedOptions]);\n    return {\n        filteredOptionsChildren,\n        filteredOptions,\n        restChildren,\n        options,\n        customIds,\n        selectedOptions,\n        interactiveChildren,\n        setSelectedOptions,\n    };\n}\n\nexport { useCombobox as default, isComboboxCustom, isComboboxOption, isInteractiveComboboxCustom, prefix, removePrefix };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}