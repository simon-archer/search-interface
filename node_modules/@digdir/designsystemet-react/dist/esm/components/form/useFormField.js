'use client';
import { useContext, useId } from 'react';
import { clsx } from '../../node_modules/clsx/dist/lite.js';
import { getSize } from '../../utilities/getSize.js';
import { FieldsetContext } from './Fieldset/FieldsetContext.js';

/**
 * Handles props and their state for various form-fields in context with Fieldset
 */
const useFormField = (props, prefix) => {
    const fieldset = useContext(FieldsetContext);
    const randomId = useId();
    const id = props.id ?? `${prefix}-${randomId}`;
    const errorId = props.errorId ?? `${prefix}-error-${randomId}`;
    const descriptionId = `${prefix}-description-${randomId}`;
    const disabled = fieldset?.disabled || props?.disabled;
    const readOnly = ((fieldset?.readOnly || props?.readOnly) && !disabled) || undefined;
    const hasError = !disabled && !readOnly && !!(props.error || fieldset?.error);
    const size = getSize(props.size || fieldset?.size || 'md');
    return {
        readOnly,
        hasError,
        errorId,
        descriptionId,
        size,
        inputProps: {
            id,
            disabled,
            'aria-invalid': hasError ? true : undefined,
            'aria-describedby': clsx(props['aria-describedby'], (!!props?.description && typeof props?.description === 'string') && descriptionId, (hasError && !fieldset?.error) && errorId, (hasError && !!fieldset?.error) && fieldset?.errorId) || undefined,
        },
    };
};

export { useFormField };
