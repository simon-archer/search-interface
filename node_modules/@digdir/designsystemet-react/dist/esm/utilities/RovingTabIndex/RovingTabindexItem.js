'use client';
import { jsx } from 'react/jsx-runtime';
import { forwardRef } from 'react';
import { useMergeRefs } from '../../node_modules/@floating-ui/react/dist/floating-ui.react.js';
import { Slot as $5e63c961fc1ce211$export$8c6ed5c666ac1360 } from '../../node_modules/@radix-ui/react-slot/dist/index.js';
import { useRovingTabindex } from './useRovingTabindex.js';

/** Get the next focusable RovingTabindexItem */
function getNextFocusableValue(items, value) {
    const currIndex = items.findIndex((item) => item.value === value);
    return items.at(currIndex === items.length - 1 ? 0 : currIndex + 1);
}
/** Get the previous focusable RovingTabindexItem */
function getPrevFocusableValue(items, value) {
    const currIndex = items.findIndex((item) => item.value === value);
    return items.at(currIndex === 0 ? -1 : currIndex - 1);
}
const RovingTabindexItem = forwardRef(({ value, asChild, ...rest }, ref) => {
    const Component = asChild ? $5e63c961fc1ce211$export$8c6ed5c666ac1360 : 'div';
    const focusValue = value ?? (typeof rest.children == 'string' ? rest.children : '');
    const { getOrderedItems, getRovingProps } = useRovingTabindex(focusValue);
    const rovingProps = getRovingProps({
        onKeyDown: (e) => {
            rest?.onKeyDown?.(e);
            const items = getOrderedItems();
            let nextItem;
            if (e.key === 'ArrowRight') {
                nextItem = getNextFocusableValue(items, focusValue);
            }
            if (e.key === 'ArrowLeft') {
                nextItem = getPrevFocusableValue(items, focusValue);
            }
            nextItem?.element.focus();
        },
    });
    const mergedRefs = useMergeRefs([ref, rovingProps.ref]);
    return (jsx(Component, { ...rest, ...rovingProps, ref: mergedRefs, children: rest.children }));
});

export { RovingTabindexItem, getNextFocusableValue, getPrevFocusableValue };
