'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var lite = require('../../node_modules/clsx/dist/lite.js');
var akselIcons = require('@navikt/aksel-icons');
var getSize = require('../../utilities/getSize.js');
var PaginationRoot = require('./PaginationRoot.js');
var PaginationContent = require('./PaginationContent.js');
var PaginationItem = require('./PaginationItem.js');
var PaginationButton = require('./PaginationButton.js');
var PaginationEllipsis = require('./PaginationEllipsis.js');
var PaginationNextPrev = require('./PaginationNextPrev.js');
var usePagination = require('./usePagination.js');

const iconSize = {
    sm: '1rem',
    md: '1.5rem',
    lg: '2rem',
};
const Pagination = React.forwardRef(({ nextLabel = '', previousLabel = '', compact = false, hideLabels = false, currentPage = 1, totalPages, onChange, itemLabel = (num) => `Side ${num}`, ...rest }, ref) => {
    const { pages, showNextPage, showPreviousPage } = usePagination.usePagination({
        compact,
        currentPage,
        totalPages,
    });
    const size = getSize.getSize(rest.size || 'md');
    return (jsxRuntime.jsx(PaginationRoot.PaginationRoot, { ref: ref, "aria-label": 'Pagination', size: size, compact: compact, ...rest, children: jsxRuntime.jsxs(PaginationContent.PaginationContent, { children: [jsxRuntime.jsx(PaginationItem.PaginationItem, { children: jsxRuntime.jsxs(PaginationNextPrev.PaginationPrevious, { className: lite.clsx(!showPreviousPage && 'fds-pagination--hidden'), onClick: () => {
                            onChange(currentPage - 1);
                        }, "aria-label": previousLabel, children: [jsxRuntime.jsx(akselIcons.ChevronLeftIcon, { "aria-hidden": true, fontSize: iconSize[size] }), !hideLabels && previousLabel] }) }), pages.map((page, i) => (jsxRuntime.jsx(PaginationItem.PaginationItem, { children: page === 'ellipsis' ? (jsxRuntime.jsx(PaginationEllipsis.PaginationEllipsis, {})) : (jsxRuntime.jsx(PaginationButton.PaginationButton, { "aria-current": currentPage === page, isActive: currentPage === page, "aria-label": itemLabel(page), onClick: () => {
                            onChange(page);
                        }, children: page })) }, `${page}${i}`))), jsxRuntime.jsx(PaginationItem.PaginationItem, { children: jsxRuntime.jsxs(PaginationNextPrev.PaginationNext, { "aria-label": nextLabel, onClick: () => {
                            onChange(currentPage + 1);
                        }, className: lite.clsx(!showNextPage && 'fds-pagination--hidden'), children: [!hideLabels && nextLabel, jsxRuntime.jsx(akselIcons.ChevronRightIcon, { "aria-hidden": true, fontSize: iconSize[size] })] }) })] }) }));
});
Pagination.displayName = 'Pagination';

exports.Pagination = Pagination;
