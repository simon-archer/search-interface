import type { FieldsetHTMLAttributes, ReactNode } from 'react';
import type { FormFieldProps } from '../useFormField';
export type FieldsetProps = {
    /** A description of the fieldset. This will appear below the legend. */
    description?: ReactNode;
    /** Toggle `disabled` all input fields within the fieldset. */
    disabled?: boolean;
    /** If set, this will diplay an error message at the bottom of the fieldset. */
    error?: ReactNode;
    /** The legend of the fieldset. */
    legend: ReactNode;
    /** Toggle `readOnly` on fieldset context.
     * @note This does not prevent fieldset values from being submited */
    readOnly?: boolean;
    /** Visually hide `legend` and `description` (still available for screen readers)  */
    hideLegend?: boolean;
} & Pick<FormFieldProps, 'size'> & FieldsetHTMLAttributes<HTMLFieldSetElement>;
export declare const Fieldset: import("react").ForwardRefExoticComponent<{
    /** A description of the fieldset. This will appear below the legend. */
    description?: ReactNode;
    /** Toggle `disabled` all input fields within the fieldset. */
    disabled?: boolean | undefined;
    /** If set, this will diplay an error message at the bottom of the fieldset. */
    error?: ReactNode;
    /** The legend of the fieldset. */
    legend: ReactNode;
    /** Toggle `readOnly` on fieldset context.
     * @note This does not prevent fieldset values from being submited */
    readOnly?: boolean | undefined;
    /** Visually hide `legend` and `description` (still available for screen readers)  */
    hideLegend?: boolean | undefined;
} & Pick<FormFieldProps, "size"> & FieldsetHTMLAttributes<HTMLFieldSetElement> & import("react").RefAttributes<HTMLFieldSetElement>>;
//# sourceMappingURL=Fieldset.d.ts.map