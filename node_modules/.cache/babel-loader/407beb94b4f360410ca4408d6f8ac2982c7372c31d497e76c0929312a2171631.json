{"ast":null,"code":"'use client';\n\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport { useContext } from 'react';\nimport '../../../Chip/index.js';\nimport { ComboboxContext } from '../ComboboxContext.js';\nimport { RemovableChip } from '../../../Chip/Removable/Removable.js';\nconst ComboboxChips = () => {\n  const context = useContext(ComboboxContext);\n  if (!context) {\n    throw new Error('ComboboxContext is missing');\n  }\n  const {\n    size,\n    readOnly,\n    disabled,\n    selectedOptions,\n    chipSrLabel,\n    handleSelectOption,\n    inputRef\n  } = context;\n  return jsx(Fragment, {\n    children: Object.keys(selectedOptions).map(value => {\n      return jsx(RemovableChip, {\n        size: size,\n        disabled: disabled,\n        onKeyDown: e => {\n          if (readOnly) return;\n          if (disabled) return;\n          if (e.key === 'Enter') {\n            e.stopPropagation();\n            handleSelectOption({\n              option: selectedOptions[value],\n              remove: true\n            });\n            inputRef.current?.focus();\n          }\n        },\n        onClick: () => {\n          if (readOnly) return;\n          if (disabled) return;\n          /* If we click a chip, filter the active values and remove the one we clicked */\n          handleSelectOption({\n            option: selectedOptions[value],\n            remove: true\n          });\n        },\n        \"aria-label\": chipSrLabel(selectedOptions[value]),\n        children: selectedOptions[value].label\n      }, value);\n    })\n  });\n};\nComboboxChips.displayName = 'ComboboxChips';\nvar ComboboxChips$1 = ComboboxChips;\nexport { ComboboxChips, ComboboxChips$1 as default };","map":{"version":3,"names":["jsx","Fragment","useContext","ComboboxContext","RemovableChip","ComboboxChips","context","Error","size","readOnly","disabled","selectedOptions","chipSrLabel","handleSelectOption","inputRef","children","Object","keys","map","value","onKeyDown","e","key","stopPropagation","option","remove","current","focus","onClick","label","displayName","ComboboxChips$1","default"],"sources":["/Users/simondreyer/CascadeProjects/search-interface/node_modules/@digdir/designsystemet-react/dist/esm/components/form/Combobox/internal/ComboboxChips.js"],"sourcesContent":["'use client';\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport { useContext } from 'react';\nimport '../../../Chip/index.js';\nimport { ComboboxContext } from '../ComboboxContext.js';\nimport { RemovableChip } from '../../../Chip/Removable/Removable.js';\n\nconst ComboboxChips = () => {\n    const context = useContext(ComboboxContext);\n    if (!context) {\n        throw new Error('ComboboxContext is missing');\n    }\n    const { size, readOnly, disabled, selectedOptions, chipSrLabel, handleSelectOption, inputRef, } = context;\n    return (jsx(Fragment, { children: Object.keys(selectedOptions).map((value) => {\n            return (jsx(RemovableChip, { size: size, disabled: disabled, onKeyDown: (e) => {\n                    if (readOnly)\n                        return;\n                    if (disabled)\n                        return;\n                    if (e.key === 'Enter') {\n                        e.stopPropagation();\n                        handleSelectOption({\n                            option: selectedOptions[value],\n                            remove: true,\n                        });\n                        inputRef.current?.focus();\n                    }\n                }, onClick: () => {\n                    if (readOnly)\n                        return;\n                    if (disabled)\n                        return;\n                    /* If we click a chip, filter the active values and remove the one we clicked */\n                    handleSelectOption({\n                        option: selectedOptions[value],\n                        remove: true,\n                    });\n                }, \"aria-label\": chipSrLabel(selectedOptions[value]), children: selectedOptions[value].label }, value));\n        }) }));\n};\nComboboxChips.displayName = 'ComboboxChips';\nvar ComboboxChips$1 = ComboboxChips;\n\nexport { ComboboxChips, ComboboxChips$1 as default };\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,GAAG,EAAEC,QAAQ,QAAQ,mBAAmB;AACjD,SAASC,UAAU,QAAQ,OAAO;AAClC,OAAO,wBAAwB;AAC/B,SAASC,eAAe,QAAQ,uBAAuB;AACvD,SAASC,aAAa,QAAQ,sCAAsC;AAEpE,MAAMC,aAAa,GAAGA,CAAA,KAAM;EACxB,MAAMC,OAAO,GAAGJ,UAAU,CAACC,eAAe,CAAC;EAC3C,IAAI,CAACG,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;EACjD;EACA,MAAM;IAAEC,IAAI;IAAEC,QAAQ;IAAEC,QAAQ;IAAEC,eAAe;IAAEC,WAAW;IAAEC,kBAAkB;IAAEC;EAAU,CAAC,GAAGR,OAAO;EACzG,OAAQN,GAAG,CAACC,QAAQ,EAAE;IAAEc,QAAQ,EAAEC,MAAM,CAACC,IAAI,CAACN,eAAe,CAAC,CAACO,GAAG,CAAEC,KAAK,IAAK;MACtE,OAAQnB,GAAG,CAACI,aAAa,EAAE;QAAEI,IAAI,EAAEA,IAAI;QAAEE,QAAQ,EAAEA,QAAQ;QAAEU,SAAS,EAAGC,CAAC,IAAK;UACvE,IAAIZ,QAAQ,EACR;UACJ,IAAIC,QAAQ,EACR;UACJ,IAAIW,CAAC,CAACC,GAAG,KAAK,OAAO,EAAE;YACnBD,CAAC,CAACE,eAAe,CAAC,CAAC;YACnBV,kBAAkB,CAAC;cACfW,MAAM,EAAEb,eAAe,CAACQ,KAAK,CAAC;cAC9BM,MAAM,EAAE;YACZ,CAAC,CAAC;YACFX,QAAQ,CAACY,OAAO,EAAEC,KAAK,CAAC,CAAC;UAC7B;QACJ,CAAC;QAAEC,OAAO,EAAEA,CAAA,KAAM;UACd,IAAInB,QAAQ,EACR;UACJ,IAAIC,QAAQ,EACR;UACJ;UACAG,kBAAkB,CAAC;YACfW,MAAM,EAAEb,eAAe,CAACQ,KAAK,CAAC;YAC9BM,MAAM,EAAE;UACZ,CAAC,CAAC;QACN,CAAC;QAAE,YAAY,EAAEb,WAAW,CAACD,eAAe,CAACQ,KAAK,CAAC,CAAC;QAAEJ,QAAQ,EAAEJ,eAAe,CAACQ,KAAK,CAAC,CAACU;MAAM,CAAC,EAAEV,KAAK,CAAC;IAC9G,CAAC;EAAE,CAAC,CAAC;AACb,CAAC;AACDd,aAAa,CAACyB,WAAW,GAAG,eAAe;AAC3C,IAAIC,eAAe,GAAG1B,aAAa;AAEnC,SAASA,aAAa,EAAE0B,eAAe,IAAIC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}