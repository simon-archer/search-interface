'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var akselIcons = require('@navikt/aksel-icons');
var lite = require('../../../node_modules/clsx/dist/lite.js');
var Group = require('../Group/Group.js');
var getSize = require('../../../utilities/getSize.js');
var Paragraph = require('../../Typography/Paragraph/Paragraph.js');

const ToggleChip = React.forwardRef(({ children, selected = false, checkmark = true, className, ...rest }, ref) => {
    const shouldDisplayCheckmark = checkmark && selected;
    const group = React.useContext(Group.ChipGroupContext);
    const size = getSize.getSize(rest.size || 'md');
    return (jsxRuntime.jsx("button", { ref: ref, type: 'button', "aria-pressed": selected, className: lite.clsx(`fds-focus`, `fds-chip--button`, `fds-chip--${group?.size || size}`, shouldDisplayCheckmark && `fds-chip--spacing`, className), ...rest, children: jsxRuntime.jsx(Paragraph.Paragraph, { asChild: true, size: group?.size || size, variant: 'short', children: jsxRuntime.jsxs("span", { className: `fds-chip__label`, children: [shouldDisplayCheckmark && (jsxRuntime.jsx(akselIcons.CheckmarkIcon, { className: `fds-chip__checkmark-icon`, "aria-hidden": true })), jsxRuntime.jsx("span", { children: children })] }) }) }));
});
ToggleChip.displayName = 'ChipToggle';

exports.ToggleChip = ToggleChip;
