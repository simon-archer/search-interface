import type { ReactNode } from 'react';
import type { FieldsetProps } from '../../Fieldset';
export type CheckboxGroupContextProps = {
    value?: string[];
    defaultValue?: string[];
    toggleValue: (value: string) => void;
};
export declare const CheckboxGroupContext: import("react").Context<CheckboxGroupContextProps | null>;
export type CheckboxGroupProps = {
    /** Collection of `Checkbox` components */
    children?: ReactNode;
    /** Controlled state for  `Checkbox`'s */
    value?: string[];
    /** Default checked `Checkbox`'s */
    defaultValue?: string[];
    /** Callback event with checked `Checkbox` values */
    onChange?: (value: string[]) => void;
} & Omit<FieldsetProps, 'onChange'>;
export declare const CheckboxGroup: import("react").ForwardRefExoticComponent<{
    /** Collection of `Checkbox` components */
    children?: ReactNode;
    /** Controlled state for  `Checkbox`'s */
    value?: string[] | undefined;
    /** Default checked `Checkbox`'s */
    defaultValue?: string[] | undefined;
    /** Callback event with checked `Checkbox` values */
    onChange?: ((value: string[]) => void) | undefined;
} & Omit<FieldsetProps, "onChange"> & import("react").RefAttributes<HTMLFieldSetElement>>;
//# sourceMappingURL=Group.d.ts.map