'use client';
'use strict';

var floatingUi_react = require('../../../node_modules/@floating-ui/react/dist/floating-ui.react.js');
var React = require('react');
var ReactDOM = require('react-dom');
var ComboboxIdContext = require('./ComboboxIdContext.js');
var floatingUi_dom = require('../../../node_modules/@floating-ui/dom/dist/floating-ui.dom.js');
var floatingUi_core = require('../../../node_modules/@floating-ui/core/dist/floating-ui.core.js');

const useFloatingCombobox = ({ listRef }) => {
    const [open, setOpen] = React.useState(false);
    const { activeIndex } = ComboboxIdContext.useComboboxId();
    const dispatch = ComboboxIdContext.useComboboxIdDispatch();
    // floating UI
    const { refs, floatingStyles, context } = floatingUi_react.useFloating({
        open,
        onOpenChange: (newOpen) => {
            if (!newOpen)
                dispatch?.({ type: 'SET_ACTIVE_INDEX', payload: 0 });
            ReactDOM.flushSync(() => {
                if (refs.floating.current && !newOpen) {
                    refs.floating.current.scrollTop = 0;
                }
                setTimeout(() => {
                    setOpen(newOpen);
                }, 1);
            });
        },
        whileElementsMounted: (reference, floating, update) => {
            floatingUi_dom.autoUpdate(reference, floating, update);
            return () => {
                floating.scrollTop = 0;
            };
        },
        middleware: [
            floatingUi_dom.flip({ padding: 10 }),
            floatingUi_dom.size({
                apply({ rects, elements }) {
                    requestAnimationFrame(() => {
                        Object.assign(elements.floating.style, {
                            width: `calc(${rects.reference.width}px - calc(var(--fds-spacing-2) * 2))`,
                            maxHeight: `200px`,
                        });
                    });
                },
            }),
            floatingUi_core.offset(10),
        ],
    });
    const role = floatingUi_react.useRole(context, { role: 'listbox' });
    const dismiss = floatingUi_react.useDismiss(context);
    const listNav = floatingUi_react.useListNavigation(context, {
        listRef,
        activeIndex,
        virtual: true,
        scrollItemIntoView: true,
        enabled: open,
        focusItemOnHover: true,
        onNavigate: (index) => {
            dispatch?.({ type: 'SET_ACTIVE_INDEX', payload: index || 0 });
        },
    });
    const { getReferenceProps, getFloatingProps, getItemProps } = floatingUi_react.useInteractions([role, dismiss, listNav]);
    return {
        open,
        setOpen,
        activeIndex,
        refs,
        floatingStyles,
        context,
        getReferenceProps,
        getFloatingProps,
        getItemProps,
    };
};

exports.useFloatingCombobox = useFloatingCombobox;
