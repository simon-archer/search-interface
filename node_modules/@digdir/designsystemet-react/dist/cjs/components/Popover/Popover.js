'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var getSize = require('../../utilities/getSize.js');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

const Popover = ({ children, placement = 'top', open, variant = 'default', portal, onOpenChange, onClose, ...rest }) => {
    const size = getSize.getSize(rest.size || 'md');
    const triggerRef = React.useRef(null);
    const [internalOpen, setInternalOpen] = React.useState(open ?? false);
    const randomPopoverId = React.useId();
    const [popoverId, setPopoverId] = React.useState(randomPopoverId);
    const randomTriggerId = React.useId();
    const [triggerId, setTriggerId] = React.useState(randomTriggerId);
    const isControlled = typeof open === 'boolean';
    React__namespace.useEffect(() => {
        setInternalOpen(open ?? false);
    }, [open]);
    const anchorEl = triggerRef.current;
    return (jsxRuntime.jsx(PopoverContext.Provider, { value: {
            triggerRef,
            anchorEl,
            portal,
            internalOpen,
            isControlled,
            setInternalOpen,
            size,
            variant,
            placement,
            onOpenChange,
            onClose,
            popoverId,
            setPopoverId,
            triggerId,
            setTriggerId,
        }, children: children }));
};
const PopoverContext = React__namespace.createContext({
    size: 'sm',
    variant: 'default',
    anchorEl: null,
    placement: 'top',
    triggerRef: { current: null },
    internalOpen: false,
    setInternalOpen: () => { },
});
Popover.displayName = 'Popover';

exports.Popover = Popover;
exports.PopoverContext = PopoverContext;
