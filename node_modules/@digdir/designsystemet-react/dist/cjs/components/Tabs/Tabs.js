'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var lite = require('../../node_modules/clsx/dist/lite.js');
var getSize = require('../../utilities/getSize.js');

const TabsContext = React.createContext({});
const Tabs = React.forwardRef(({ children, value, defaultValue, className, onChange, ...rest }, ref) => {
    const size = getSize.getSize(rest.size || 'md');
    const isControlled = value !== undefined;
    const [uncontrolledValue, setUncontrolledValue] = React.useState(defaultValue);
    let onValueChange = onChange;
    if (!isControlled) {
        onValueChange = (newValue) => {
            setUncontrolledValue(newValue);
            onChange?.(newValue);
        };
        value = uncontrolledValue;
    }
    return (jsxRuntime.jsx(TabsContext.Provider, { value: {
            value,
            defaultValue,
            onChange: onValueChange,
        }, children: jsxRuntime.jsx("div", { className: lite.clsx(`fds-tabs--${size}`, className), ref: ref, ...rest, children: children }) }));
});
Tabs.displayName = 'Tabs';

exports.Tabs = Tabs;
exports.TabsContext = TabsContext;
